
sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec8  08003ec8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec8  08003ec8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000014  08003ee4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08003ee4  00020488  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea61  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ed  00000000  00000000  0002ea9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00030d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00031d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001951e  00000000  00000000  00032b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f052  00000000  00000000  0004c096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a64e  00000000  00000000  0005b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef8  00000000  00000000  000f578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	080030a8 	.word	0x080030a8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	080030a8 	.word	0x080030a8

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ae:	f000 fcd1 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b2:	f000 f857 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b6:	f000 f8e5 	bl	8000384 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001ba:	f000 f8a5 	bl	8000308 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SSD1306_Init();  // initialise
 80001be:	f000 f939 	bl	8000434 <SSD1306_Init>
//	SSD1306_GotoXY (0, 20);
//	SSD1306_Puts (str, &Font_11x18, 1);
//	SSD1306_UpdateScreen(); //display
////	HAL_Delay (2000);

	char print[] = "A";
 80001c2:	2341      	movs	r3, #65	; 0x41
 80001c4:	80bb      	strh	r3, [r7, #4]

	while(1){
	//		HAL_Delay(100);
			SSD1306_GotoXY (0,0);
 80001c6:	2100      	movs	r1, #0
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 fa9b 	bl	8000704 <SSD1306_GotoXY>

			SSD1306_GotoXY (10,10); // goto 10, 10
 80001ce:	210a      	movs	r1, #10
 80001d0:	200a      	movs	r0, #10
 80001d2:	f000 fa97 	bl	8000704 <SSD1306_GotoXY>
			SSD1306_Puts ("starting", &Font_11x18, 1); // print Hello
 80001d6:	2201      	movs	r2, #1
 80001d8:	491e      	ldr	r1, [pc, #120]	; (8000254 <main+0xac>)
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <main+0xb0>)
 80001dc:	f000 fb28 	bl	8000830 <SSD1306_Puts>
			SSD1306_GotoXY (10, 30);
 80001e0:	211e      	movs	r1, #30
 80001e2:	200a      	movs	r0, #10
 80001e4:	f000 fa8e 	bl	8000704 <SSD1306_GotoXY>
			SSD1306_UpdateScreen();
 80001e8:	f000 f9e8 	bl	80005bc <SSD1306_UpdateScreen>
			SSD1306_Puts ("...", &Font_11x18, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <main+0xac>)
 80001f0:	481a      	ldr	r0, [pc, #104]	; (800025c <main+0xb4>)
 80001f2:	f000 fb1d 	bl	8000830 <SSD1306_Puts>
			SSD1306_UpdateScreen(); // update screen
 80001f6:	f000 f9e1 	bl	80005bc <SSD1306_UpdateScreen>

			HAL_Delay(100);
 80001fa:	2064      	movs	r0, #100	; 0x64
 80001fc:	f000 fd20 	bl	8000c40 <HAL_Delay>
			SSD1306_Clear();
 8000200:	f000 fb3b 	bl	800087a <SSD1306_Clear>
			break;
 8000204:	bf00      	nop

	while (1)
	{
//		continue;

		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET){
 8000206:	2101      	movs	r1, #1
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f000 ff7e 	bl	800110c <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d11a      	bne.n	800024c <main+0xa4>
			SSD1306_Clear();  // scroll entire screen
 8000216:	f000 fb30 	bl	800087a <SSD1306_Clear>
			SSD1306_GotoXY (0,0);
 800021a:	2100      	movs	r1, #0
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fa71 	bl	8000704 <SSD1306_GotoXY>
			SSD1306_Puts (print, &Font_11x18, 1);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2201      	movs	r2, #1
 8000226:	490b      	ldr	r1, [pc, #44]	; (8000254 <main+0xac>)
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fb01 	bl	8000830 <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 800022e:	f000 f9c5 	bl	80005bc <SSD1306_UpdateScreen>
			print[0]+=1;
 8000232:	793b      	ldrb	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	b2db      	uxtb	r3, r3
 8000238:	713b      	strb	r3, [r7, #4]

			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800023a:	2120      	movs	r1, #32
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0xb8>)
 800023e:	f000 ff93 	bl	8001168 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fcfb 	bl	8000c40 <HAL_Delay>
 800024a:	e7dc      	b.n	8000206 <main+0x5e>

		}

		else{
			SSD1306_Stopscroll();
 800024c:	f000 f8e8 	bl	8000420 <SSD1306_Stopscroll>
		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET){
 8000250:	e7d9      	b.n	8000206 <main+0x5e>
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	080030c0 	.word	0x080030c0
 800025c:	080030cc 	.word	0x080030cc
 8000260:	48000400 	.word	0x48000400

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b09a      	sub	sp, #104	; 0x68
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0320 	add.w	r3, r7, #32
 800026e:	2248      	movs	r2, #72	; 0x48
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ff10 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
 8000288:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <SystemClock_Config+0xa0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000292:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <SystemClock_Config+0xa0>)
 8000294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <SystemClock_Config+0xa0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a6:	2320      	movs	r3, #32
 80002a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b2:	2360      	movs	r3, #96	; 0x60
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0320 	add.w	r3, r7, #32
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fe90 	bl	8001fe4 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ca:	f000 f8a3 	bl	8000414 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002ce:	234f      	movs	r3, #79	; 0x4f
 80002d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fa13 	bl	8002718 <HAL_RCC_ClockConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002f8:	f000 f88c 	bl	8000414 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3768      	adds	r7, #104	; 0x68
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	58000400 	.word	0x58000400

08000308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MX_I2C2_Init+0x74>)
 800030e:	4a1c      	ldr	r2, [pc, #112]	; (8000380 <MX_I2C2_Init+0x78>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000004;
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_I2C2_Init+0x74>)
 8000314:	2204      	movs	r2, #4
 8000316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_I2C2_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_I2C2_Init+0x74>)
 8000320:	2201      	movs	r2, #1
 8000322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_I2C2_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_I2C2_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_I2C2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_I2C2_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_I2C2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000342:	480e      	ldr	r0, [pc, #56]	; (800037c <MX_I2C2_Init+0x74>)
 8000344:	f000 ff29 	bl	800119a <HAL_I2C_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800034e:	f000 f861 	bl	8000414 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000352:	2100      	movs	r1, #0
 8000354:	4809      	ldr	r0, [pc, #36]	; (800037c <MX_I2C2_Init+0x74>)
 8000356:	f001 fb1b 	bl	8001990 <HAL_I2CEx_ConfigAnalogFilter>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000360:	f000 f858 	bl	8000414 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000364:	2100      	movs	r1, #0
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_I2C2_Init+0x74>)
 8000368:	f001 fb5c 	bl	8001a24 <HAL_I2CEx_ConfigDigitalFilter>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000372:	f000 f84f 	bl	8000414 <Error_Handler>
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	  HAL_Delay(1000);
//	}
  /* USER CODE END I2C2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000438 	.word	0x20000438
 8000380:	40005800 	.word	0x40005800

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	2001      	movs	r0, #1
 800039a:	f7ff feed 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	2002      	movs	r0, #2
 80003a0:	f7ff feea 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2120      	movs	r1, #32
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003aa:	f000 fec6 	bl	800113a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2130      	movs	r1, #48	; 0x30
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fec0 	bl	800113a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80003ba:	2320      	movs	r3, #32
 80003bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4810      	ldr	r0, [pc, #64]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003d0:	f000 fd3c 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80003d4:	2301      	movs	r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003dc:	2301      	movs	r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e8:	f000 fd30 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 80003ec:	2330      	movs	r3, #48	; 0x30
 80003ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2300      	movs	r3, #0
 80003fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f000 fd22 	bl	8000e4c <HAL_GPIO_Init>

}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	48000400 	.word	0x48000400

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000424:	222e      	movs	r2, #46	; 0x2e
 8000426:	2100      	movs	r1, #0
 8000428:	2078      	movs	r0, #120	; 0x78
 800042a:	f000 fa8b 	bl	8000944 <ssd1306_I2C_Write>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800043a:	f000 fa27 	bl	800088c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800043e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000442:	2201      	movs	r2, #1
 8000444:	2178      	movs	r1, #120	; 0x78
 8000446:	485b      	ldr	r0, [pc, #364]	; (80005b4 <SSD1306_Init+0x180>)
 8000448:	f001 f82a 	bl	80014a0 <HAL_I2C_IsDeviceReady>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000452:	2300      	movs	r3, #0
 8000454:	e0a9      	b.n	80005aa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000456:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800045a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800045c:	e002      	b.n	8000464 <SSD1306_Init+0x30>
		p--;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3b01      	subs	r3, #1
 8000462:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f9      	bne.n	800045e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800046a:	22ae      	movs	r2, #174	; 0xae
 800046c:	2100      	movs	r1, #0
 800046e:	2078      	movs	r0, #120	; 0x78
 8000470:	f000 fa68 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000474:	2220      	movs	r2, #32
 8000476:	2100      	movs	r1, #0
 8000478:	2078      	movs	r0, #120	; 0x78
 800047a:	f000 fa63 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800047e:	2210      	movs	r2, #16
 8000480:	2100      	movs	r1, #0
 8000482:	2078      	movs	r0, #120	; 0x78
 8000484:	f000 fa5e 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000488:	22b0      	movs	r2, #176	; 0xb0
 800048a:	2100      	movs	r1, #0
 800048c:	2078      	movs	r0, #120	; 0x78
 800048e:	f000 fa59 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000492:	22c8      	movs	r2, #200	; 0xc8
 8000494:	2100      	movs	r1, #0
 8000496:	2078      	movs	r0, #120	; 0x78
 8000498:	f000 fa54 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2078      	movs	r0, #120	; 0x78
 80004a2:	f000 fa4f 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80004a6:	2210      	movs	r2, #16
 80004a8:	2100      	movs	r1, #0
 80004aa:	2078      	movs	r0, #120	; 0x78
 80004ac:	f000 fa4a 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80004b0:	2240      	movs	r2, #64	; 0x40
 80004b2:	2100      	movs	r1, #0
 80004b4:	2078      	movs	r0, #120	; 0x78
 80004b6:	f000 fa45 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80004ba:	2281      	movs	r2, #129	; 0x81
 80004bc:	2100      	movs	r1, #0
 80004be:	2078      	movs	r0, #120	; 0x78
 80004c0:	f000 fa40 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80004c4:	22ff      	movs	r2, #255	; 0xff
 80004c6:	2100      	movs	r1, #0
 80004c8:	2078      	movs	r0, #120	; 0x78
 80004ca:	f000 fa3b 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80004ce:	22a1      	movs	r2, #161	; 0xa1
 80004d0:	2100      	movs	r1, #0
 80004d2:	2078      	movs	r0, #120	; 0x78
 80004d4:	f000 fa36 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80004d8:	22a6      	movs	r2, #166	; 0xa6
 80004da:	2100      	movs	r1, #0
 80004dc:	2078      	movs	r0, #120	; 0x78
 80004de:	f000 fa31 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80004e2:	22a8      	movs	r2, #168	; 0xa8
 80004e4:	2100      	movs	r1, #0
 80004e6:	2078      	movs	r0, #120	; 0x78
 80004e8:	f000 fa2c 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80004ec:	223f      	movs	r2, #63	; 0x3f
 80004ee:	2100      	movs	r1, #0
 80004f0:	2078      	movs	r0, #120	; 0x78
 80004f2:	f000 fa27 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004f6:	22a4      	movs	r2, #164	; 0xa4
 80004f8:	2100      	movs	r1, #0
 80004fa:	2078      	movs	r0, #120	; 0x78
 80004fc:	f000 fa22 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000500:	22d3      	movs	r2, #211	; 0xd3
 8000502:	2100      	movs	r1, #0
 8000504:	2078      	movs	r0, #120	; 0x78
 8000506:	f000 fa1d 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2078      	movs	r0, #120	; 0x78
 8000510:	f000 fa18 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000514:	22d5      	movs	r2, #213	; 0xd5
 8000516:	2100      	movs	r1, #0
 8000518:	2078      	movs	r0, #120	; 0x78
 800051a:	f000 fa13 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800051e:	22f0      	movs	r2, #240	; 0xf0
 8000520:	2100      	movs	r1, #0
 8000522:	2078      	movs	r0, #120	; 0x78
 8000524:	f000 fa0e 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000528:	22d9      	movs	r2, #217	; 0xd9
 800052a:	2100      	movs	r1, #0
 800052c:	2078      	movs	r0, #120	; 0x78
 800052e:	f000 fa09 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000532:	2222      	movs	r2, #34	; 0x22
 8000534:	2100      	movs	r1, #0
 8000536:	2078      	movs	r0, #120	; 0x78
 8000538:	f000 fa04 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800053c:	22da      	movs	r2, #218	; 0xda
 800053e:	2100      	movs	r1, #0
 8000540:	2078      	movs	r0, #120	; 0x78
 8000542:	f000 f9ff 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000546:	2212      	movs	r2, #18
 8000548:	2100      	movs	r1, #0
 800054a:	2078      	movs	r0, #120	; 0x78
 800054c:	f000 f9fa 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000550:	22db      	movs	r2, #219	; 0xdb
 8000552:	2100      	movs	r1, #0
 8000554:	2078      	movs	r0, #120	; 0x78
 8000556:	f000 f9f5 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	2078      	movs	r0, #120	; 0x78
 8000560:	f000 f9f0 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000564:	228d      	movs	r2, #141	; 0x8d
 8000566:	2100      	movs	r1, #0
 8000568:	2078      	movs	r0, #120	; 0x78
 800056a:	f000 f9eb 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800056e:	2214      	movs	r2, #20
 8000570:	2100      	movs	r1, #0
 8000572:	2078      	movs	r0, #120	; 0x78
 8000574:	f000 f9e6 	bl	8000944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000578:	22af      	movs	r2, #175	; 0xaf
 800057a:	2100      	movs	r1, #0
 800057c:	2078      	movs	r0, #120	; 0x78
 800057e:	f000 f9e1 	bl	8000944 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000582:	222e      	movs	r2, #46	; 0x2e
 8000584:	2100      	movs	r1, #0
 8000586:	2078      	movs	r0, #120	; 0x78
 8000588:	f000 f9dc 	bl	8000944 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f843 	bl	8000618 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000592:	f000 f813 	bl	80005bc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <SSD1306_Init+0x184>)
 8000598:	2200      	movs	r2, #0
 800059a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SSD1306_Init+0x184>)
 800059e:	2200      	movs	r2, #0
 80005a0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <SSD1306_Init+0x184>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000438 	.word	0x20000438
 80005b8:	20000430 	.word	0x20000430

080005bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e01d      	b.n	8000604 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	3b50      	subs	r3, #80	; 0x50
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f000 f9b6 	bl	8000944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2078      	movs	r0, #120	; 0x78
 80005de:	f000 f9b1 	bl	8000944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80005e2:	2210      	movs	r2, #16
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 f9ac 	bl	8000944 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <SSD1306_UpdateScreen+0x58>)
 80005f2:	441a      	add	r2, r3
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 f95b 	bl	80008b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	3301      	adds	r3, #1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b07      	cmp	r3, #7
 8000608:	d9de      	bls.n	80005c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000030 	.word	0x20000030

08000618 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <SSD1306_Fill+0x14>
 8000628:	2300      	movs	r3, #0
 800062a:	e000      	b.n	800062e <SSD1306_Fill+0x16>
 800062c:	23ff      	movs	r3, #255	; 0xff
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	4619      	mov	r1, r3
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <SSD1306_Fill+0x2c>)
 8000636:	f002 fd2f 	bl	8003098 <memset>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000030 	.word	0x20000030

08000648 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	70fb      	strb	r3, [r7, #3]
	if (
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b7f      	cmp	r3, #127	; 0x7f
 800065e:	d848      	bhi.n	80006f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	2b3f      	cmp	r3, #63	; 0x3f
 8000664:	d845      	bhi.n	80006f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SSD1306_DrawPixel+0xb4>)
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf0c      	ite	eq
 8000674:	2301      	moveq	r3, #1
 8000676:	2300      	movne	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d11a      	bne.n	80006b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000682:	88fa      	ldrh	r2, [r7, #6]
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	b298      	uxth	r0, r3
 800068a:	4603      	mov	r3, r0
 800068c:	01db      	lsls	r3, r3, #7
 800068e:	4413      	add	r3, r2
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <SSD1306_DrawPixel+0xb8>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	b25a      	sxtb	r2, r3
 8000696:	88bb      	ldrh	r3, [r7, #4]
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b259      	sxtb	r1, r3
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	4603      	mov	r3, r0
 80006ac:	01db      	lsls	r3, r3, #7
 80006ae:	4413      	add	r3, r2
 80006b0:	b2c9      	uxtb	r1, r1
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <SSD1306_DrawPixel+0xb8>)
 80006b4:	54d1      	strb	r1, [r2, r3]
 80006b6:	e01d      	b.n	80006f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	08db      	lsrs	r3, r3, #3
 80006be:	b298      	uxth	r0, r3
 80006c0:	4603      	mov	r3, r0
 80006c2:	01db      	lsls	r3, r3, #7
 80006c4:	4413      	add	r3, r2
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <SSD1306_DrawPixel+0xb8>)
 80006c8:	5cd3      	ldrb	r3, [r2, r3]
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	2101      	movs	r1, #1
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	b259      	sxtb	r1, r3
 80006e2:	88fa      	ldrh	r2, [r7, #6]
 80006e4:	4603      	mov	r3, r0
 80006e6:	01db      	lsls	r3, r3, #7
 80006e8:	4413      	add	r3, r2
 80006ea:	b2c9      	uxtb	r1, r1
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <SSD1306_DrawPixel+0xb8>)
 80006ee:	54d1      	strb	r1, [r2, r3]
 80006f0:	e000      	b.n	80006f4 <SSD1306_DrawPixel+0xac>
		return;
 80006f2:	bf00      	nop
	}
}
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000430 	.word	0x20000430
 8000700:	20000030 	.word	0x20000030

08000704 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	80fb      	strh	r3, [r7, #6]
 8000710:	4613      	mov	r3, r2
 8000712:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <SSD1306_GotoXY+0x28>)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <SSD1306_GotoXY+0x28>)
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	8053      	strh	r3, [r2, #2]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000430 	.word	0x20000430

08000730 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000740:	4b3a      	ldr	r3, [pc, #232]	; (800082c <SSD1306_Putc+0xfc>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
	if (
 800074c:	2b7f      	cmp	r3, #127	; 0x7f
 800074e:	dc07      	bgt.n	8000760 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <SSD1306_Putc+0xfc>)
 8000752:	885b      	ldrh	r3, [r3, #2]
 8000754:	461a      	mov	r2, r3
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800075c:	2b3f      	cmp	r3, #63	; 0x3f
 800075e:	dd01      	ble.n	8000764 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000760:	2300      	movs	r3, #0
 8000762:	e05e      	b.n	8000822 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	e04b      	b.n	8000802 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3b20      	subs	r3, #32
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	7849      	ldrb	r1, [r1, #1]
 8000776:	fb01 f303 	mul.w	r3, r1, r3
 800077a:	4619      	mov	r1, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	e030      	b.n	80007f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d010      	beq.n	80007c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <SSD1306_Putc+0xfc>)
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b298      	uxth	r0, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <SSD1306_Putc+0xfc>)
 80007ac:	885a      	ldrh	r2, [r3, #2]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	4413      	add	r3, r2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f7ff ff45 	bl	8000648 <SSD1306_DrawPixel>
 80007be:	e014      	b.n	80007ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <SSD1306_Putc+0xfc>)
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	b298      	uxth	r0, r3
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <SSD1306_Putc+0xfc>)
 80007ce:	885a      	ldrh	r2, [r3, #2]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b299      	uxth	r1, r3
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	f7ff ff2f 	bl	8000648 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	3301      	adds	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d3c8      	bcc.n	800078e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	461a      	mov	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	4293      	cmp	r3, r2
 800080c:	d3ad      	bcc.n	800076a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <SSD1306_Putc+0xfc>)
 8000810:	881a      	ldrh	r2, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4413      	add	r3, r2
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <SSD1306_Putc+0xfc>)
 800081e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000430 	.word	0x20000430

08000830 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800083e:	e012      	b.n	8000866 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff71 	bl	8000730 <SSD1306_Putc>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d002      	beq.n	8000860 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	e008      	b.n	8000872 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1e8      	bne.n	8000840 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	781b      	ldrb	r3, [r3, #0]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff feca 	bl	8000618 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000884:	f7ff fe9a 	bl	80005bc <SSD1306_UpdateScreen>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <ssd1306_I2C_Init+0x24>)
 8000894:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000896:	e002      	b.n	800089e <ssd1306_I2C_Init+0x12>
		p--;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f9      	bne.n	8000898 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	0003d090 	.word	0x0003d090

080008b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b0c7      	sub	sp, #284	; 0x11c
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4639      	mov	r1, r7
 80008c0:	600a      	str	r2, [r1, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	4622      	mov	r2, r4
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	1dbb      	adds	r3, r7, #6
 80008cc:	4602      	mov	r2, r0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	460a      	mov	r2, r1
 80008d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	1dba      	adds	r2, r7, #6
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008e6:	e010      	b.n	800090a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80008e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008ec:	463a      	mov	r2, r7
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	441a      	add	r2, r3
 80008f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008f6:	3301      	adds	r3, #1
 80008f8:	7811      	ldrb	r1, [r2, #0]
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000900:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000904:	3301      	adds	r3, #1
 8000906:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800090a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800090e:	b29b      	uxth	r3, r3
 8000910:	1d3a      	adds	r2, r7, #4
 8000912:	8812      	ldrh	r2, [r2, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8e7      	bhi.n	80008e8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b299      	uxth	r1, r3
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	f107 020c 	add.w	r2, r7, #12
 800092a:	200a      	movs	r0, #10
 800092c:	9000      	str	r0, [sp, #0]
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <ssd1306_I2C_WriteMulti+0x8c>)
 8000930:	f000 fcc2 	bl	80012b8 <HAL_I2C_Master_Transmit>
}
 8000934:	bf00      	nop
 8000936:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	bf00      	nop
 8000940:	20000438 	.word	0x20000438

08000944 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	460b      	mov	r3, r1
 8000950:	71bb      	strb	r3, [r7, #6]
 8000952:	4613      	mov	r3, r2
 8000954:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	b299      	uxth	r1, r3
 8000962:	f107 020c 	add.w	r2, r7, #12
 8000966:	230a      	movs	r3, #10
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <ssd1306_I2C_Write+0x38>)
 800096e:	f000 fca3 	bl	80012b8 <HAL_I2C_Master_Transmit>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000438 	.word	0x20000438

08000980 <LL_AHB2_GRP1_EnableClock>:
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4313      	orrs	r3, r2
 8000996:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a4:	68fb      	ldr	r3, [r7, #12]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d4:	68fb      	ldr	r3, [r7, #12]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	; 0x58
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2238      	movs	r2, #56	; 0x38
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fb43 	bl	8003098 <memset>
  if(hi2c->Instance==I2C2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <HAL_I2C_MspInit+0xb0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d13b      	bne.n	8000a94 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a20:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 f9f6 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a36:	f7ff fced 	bl	8000414 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff ffa0 	bl	8000980 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff ff9d 	bl	8000980 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = sda_Pin;
 8000a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(sda_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 f9f1 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = scl_Pin;
 8000a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(scl_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a88:	f000 f9e0 	bl	8000e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a8c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a90:	f7ff ff8e 	bl	80009b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3758      	adds	r7, #88	; 0x58
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	48000400 	.word	0x48000400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f88d 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b04:	f7ff fff5 	bl	8000af2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b2e:	f002 fa8f 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fb39 	bl	80001a8 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b44:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 8000b48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b4c:	20000488 	.word	0x20000488

08000b50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f942 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b64:	f001 ff9c 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <HAL_Init+0x3c>)
 8000b6c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f000 f810 	bl	8000b94 <HAL_InitTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	e001      	b.n	8000b84 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b80:	f7ff ff2e 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d024      	beq.n	8000bf2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	f001 ff7a 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_InitTick+0x6c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f936 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10f      	bne.n	8000bec <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d809      	bhi.n	8000be6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bda:	f000 f910 	bl	8000dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <HAL_InitTick+0x70>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e007      	b.n	8000bf6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e004      	b.n	8000bf6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e001      	b.n	8000bf6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000010 	.word	0x20000010
 8000c04:	2000000c 	.word	0x2000000c

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000010 	.word	0x20000010
 8000c28:	20000484 	.word	0x20000484

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000484 	.word	0x20000484

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff fff0 	bl	8000c2c <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffe0 	bl	8000c2c <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000010 	.word	0x20000010

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc8:	f7ff ff90 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff49 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff60 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff92 	bl	8000d40 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff61 	bl	8000cec <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb2 	bl	8000da4 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e140      	b.n	80010de <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8132 	beq.w	80010d8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00b      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	2b11      	cmp	r3, #17
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0xea>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 808c 	beq.w	80010d8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1bc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a44      	ldr	r2, [pc, #272]	; (8001100 <HAL_GPIO_Init+0x2b4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1b8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a43      	ldr	r2, [pc, #268]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1b4>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e004      	b.n	800100a <HAL_GPIO_Init+0x1be>
 8001000:	2307      	movs	r3, #7
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0x1be>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_GPIO_Init+0x1be>
 8001008:	2300      	movs	r3, #0
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4093      	lsls	r3, r2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101a:	4938      	ldr	r1, [pc, #224]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800102e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8001058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800105c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f aeb7 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	58000800 	.word	0x58000800

0800110c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
 8001146:	4613      	mov	r3, r2
 8001148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114a:	787b      	ldrb	r3, [r7, #1]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001156:	e002      	b.n	800115e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43d9      	mvns	r1, r3
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	400b      	ands	r3, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e081      	b.n	80012b0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fc13 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e006      	b.n	8001222 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001220:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d104      	bne.n	8001234 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001232:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001246:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001256:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	ea42 0103 	orr.w	r1, r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	021a      	lsls	r2, r3, #8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69d9      	ldr	r1, [r3, #28]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2220      	movs	r2, #32
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	817b      	strh	r3, [r7, #10]
 80012c8:	4613      	mov	r3, r2
 80012ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	f040 80da 	bne.w	800148e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_I2C_Master_Transmit+0x30>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e0d3      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012f0:	f7ff fc9c 	bl	8000c2c <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2319      	movs	r3, #25
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f9f6 	bl	80016f4 <I2C_WaitOnFlagUntilTimeout>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0be      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2221      	movs	r2, #33	; 0x21
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2210      	movs	r2, #16
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	893a      	ldrh	r2, [r7, #8]
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d90e      	bls.n	8001362 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_I2C_Master_Transmit+0x1e0>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 faec 	bl	8001938 <I2C_TransferConfig>
 8001360:	e06c      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	8979      	ldrh	r1, [r7, #10]
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_I2C_Master_Transmit+0x1e0>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fadb 	bl	8001938 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001382:	e05b      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	6a39      	ldr	r1, [r7, #32]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f9f3 	bl	8001774 <I2C_WaitOnTXISFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e07b      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d034      	beq.n	800143c <HAL_I2C_Master_Transmit+0x184>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d130      	bne.n	800143c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f985 	bl	80016f4 <I2C_WaitOnFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e04d      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d90e      	bls.n	800141c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001408:	b2da      	uxtb	r2, r3
 800140a:	8979      	ldrh	r1, [r7, #10]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fa8f 	bl	8001938 <I2C_TransferConfig>
 800141a:	e00f      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	b2da      	uxtb	r2, r3
 800142c:	8979      	ldrh	r1, [r7, #10]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fa7e 	bl	8001938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d19e      	bne.n	8001384 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6a39      	ldr	r1, [r7, #32]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9d2 	bl	80017f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e01a      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_I2C_Master_Transmit+0x1e4>)
 800146e:	400b      	ands	r3, r1
 8001470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80002000 	.word	0x80002000
 800149c:	fe00e800 	.word	0xfe00e800

080014a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	460b      	mov	r3, r1
 80014ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b20      	cmp	r3, #32
 80014be:	f040 80f1 	bne.w	80016a4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e0e7      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_I2C_IsDeviceReady+0x44>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e0e0      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_I2C_IsDeviceReady+0x72>
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001510:	e004      	b.n	800151c <HAL_I2C_IsDeviceReady+0x7c>
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001518:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fb83 	bl	8000c2c <HAL_GetTick>
 8001526:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b20      	cmp	r3, #32
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b10      	cmp	r3, #16
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001554:	e034      	b.n	80015c0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155c:	d01a      	beq.n	8001594 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800155e:	f7ff fb65 	bl	8000c2c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d302      	bcc.n	8001574 <HAL_I2C_IsDeviceReady+0xd4>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e088      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b20      	cmp	r3, #32
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_I2C_IsDeviceReady+0x12c>
 80015c6:	7fbb      	ldrb	r3, [r7, #30]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0c4      	beq.n	8001556 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d01a      	beq.n	8001610 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f885 	bl	80016f4 <I2C_WaitOnFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e058      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2220      	movs	r2, #32
 80015fa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e04a      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	2120      	movs	r1, #32
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f86a 	bl	80016f4 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e03d      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	d118      	bne.n	8001674 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001650:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	2120      	movs	r1, #32
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f849 	bl	80016f4 <I2C_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e01c      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2220      	movs	r2, #32
 8001672:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	f63f af3b 	bhi.w	80014fa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f043 0220 	orr.w	r2, r3, #32
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
  }
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d103      	bne.n	80016cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d007      	beq.n	80016ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	619a      	str	r2, [r3, #24]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001704:	e022      	b.n	800174c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800170c:	d01e      	beq.n	800174c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170e:	f7ff fa8d 	bl	8000c2c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d113      	bne.n	800174c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f043 0220 	orr.w	r2, r3, #32
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e00f      	b.n	800176c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4013      	ands	r3, r2
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	429a      	cmp	r2, r3
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	429a      	cmp	r2, r3
 8001768:	d0cd      	beq.n	8001706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001780:	e02c      	b.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f870 	bl	800186c <I2C_IsAcknowledgeFailed>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e02a      	b.n	80017ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d01e      	beq.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179e:	f7ff fa45 	bl	8000c2c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d302      	bcc.n	80017b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d113      	bne.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e007      	b.n	80017ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d1cb      	bne.n	8001782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001800:	e028      	b.n	8001854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f830 	bl	800186c <I2C_IsAcknowledgeFailed>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e026      	b.n	8001864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff fa09 	bl	8000c2c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b20      	cmp	r3, #32
 8001860:	d1cf      	bne.n	8001802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b10      	cmp	r3, #16
 8001884:	d151      	bne.n	800192a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001886:	e022      	b.n	80018ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800188e:	d01e      	beq.n	80018ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001890:	f7ff f9cc 	bl	8000c2c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	429a      	cmp	r2, r3
 800189e:	d302      	bcc.n	80018a6 <I2C_IsAcknowledgeFailed+0x3a>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d113      	bne.n	80018ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f043 0220 	orr.w	r2, r3, #32
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e02e      	b.n	800192c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d1d5      	bne.n	8001888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2210      	movs	r2, #16
 80018e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2220      	movs	r2, #32
 80018ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fede 	bl	80016ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <I2C_IsAcknowledgeFailed+0xc8>)
 80018fe:	400b      	ands	r3, r1
 8001900:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	fe00e800 	.word	0xfe00e800

08001938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	817b      	strh	r3, [r7, #10]
 8001946:	4613      	mov	r3, r2
 8001948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <I2C_TransferConfig+0x54>)
 800195a:	430b      	orrs	r3, r1
 800195c:	43db      	mvns	r3, r3
 800195e:	ea02 0103 	and.w	r1, r2, r3
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001968:	7a7b      	ldrb	r3, [r7, #9]
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	431a      	orrs	r2, r3
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	431a      	orrs	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	03ff63ff 	.word	0x03ff63ff

08001990 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d138      	bne.n	8001a18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e032      	b.n	8001a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2224      	movs	r2, #36	; 0x24
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d139      	bne.n	8001aae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e033      	b.n	8001ab0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	; 0x24
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	58000400 	.word	0x58000400

08001ad8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_PWREx_GetVoltageRange+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	58000400 	.word	0x58000400

08001af0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b00:	d101      	bne.n	8001b06 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	58000400 	.word	0x58000400

08001b14 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5e:	d101      	bne.n	8001b64 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bb8:	d101      	bne.n	8001bbe <LL_RCC_HSE_IsReady+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_RCC_HSE_IsReady+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c12:	d101      	bne.n	8001c18 <LL_RCC_HSI_IsReady+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_RCC_HSI_IsReady+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d101      	bne.n	8001c62 <LL_RCC_LSE_IsReady+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_RCC_LSE_IsReady+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d101      	bne.n	8001cc4 <LL_RCC_LSI_IsReady+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_RCC_LSI_IsReady+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_MSI_IsReady+0x16>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_MSI_IsReady+0x18>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d101      	bne.n	8001d3c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_RCC_PLL_IsReady+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_RCC_PLL_IsReady+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d101      	bne.n	8001f72 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d101      	bne.n	8001f96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fb2:	d101      	bne.n	8001fb8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fd4:	d101      	bne.n	8001fda <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e38a      	b.n	800270c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff6:	f7ff fee4 	bl	8001dc2 <LL_RCC_GetSysClkSource>
 8001ffa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	f7ff ffa2 	bl	8001f44 <LL_RCC_PLL_GetMainSource>
 8002000:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80c9 	beq.w	80021a2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x3e>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d17b      	bne.n	8002114 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d178      	bne.n	8002114 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002022:	f7ff fe70 	bl	8001d06 <LL_RCC_MSI_IsReady>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x54>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e369      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x72>
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	e006      	b.n	8002064 <HAL_RCC_OscConfig+0x80>
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	4293      	cmp	r3, r2
 8002066:	d222      	bcs.n	80020ae <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fd2b 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e347      	b.n	800270c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fe64 	bl	8001d74 <LL_RCC_MSI_SetCalibTrimming>
 80020ac:	e021      	b.n	80020f2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe4b 	bl	8001d74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fcf0 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e30c      	b.n	800270c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020f2:	f000 fcd5 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4ab4      	ldr	r2, [pc, #720]	; (80023cc <HAL_RCC_OscConfig+0x3e8>)
 80020fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020fc:	4bb4      	ldr	r3, [pc, #720]	; (80023d0 <HAL_RCC_OscConfig+0x3ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fd47 	bl	8000b94 <HAL_InitTick>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d047      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	e2fb      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02c      	beq.n	8002176 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800211c:	f7ff fdd7 	bl	8001cce <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002120:	f7fe fd84 	bl	8000c2c <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002128:	f7fe fd80 	bl	8000c2c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e2e8      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800213a:	f7ff fde4 	bl	8001d06 <LL_RCC_MSI_IsReady>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f1      	beq.n	8002128 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe00 	bl	8001d74 <LL_RCC_MSI_SetCalibTrimming>
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002176:	f7ff fdb8 	bl	8001cea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217a:	f7fe fd57 	bl	8000c2c <HAL_GetTick>
 800217e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002182:	f7fe fd53 	bl	8000c2c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e2bb      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002194:	f7ff fdb7 	bl	8001d06 <LL_RCC_MSI_IsReady>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f1      	bne.n	8002182 <HAL_RCC_OscConfig+0x19e>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d05f      	beq.n	800226e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x1dc>
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d10a      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	f7ff fcf1 	bl	8001ba6 <LL_RCC_HSE_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d050      	beq.n	800226c <HAL_RCC_OscConfig+0x288>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d14c      	bne.n	800226c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e29a      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_OscConfig+0x218>
 80021f6:	f7ff fcba 	bl	8001b6e <LL_RCC_HSE_Enable>
 80021fa:	e00d      	b.n	8002218 <HAL_RCC_OscConfig+0x234>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002204:	d104      	bne.n	8002210 <HAL_RCC_OscConfig+0x22c>
 8002206:	f7ff fc85 	bl	8001b14 <LL_RCC_HSE_EnableTcxo>
 800220a:	f7ff fcb0 	bl	8001b6e <LL_RCC_HSE_Enable>
 800220e:	e003      	b.n	8002218 <HAL_RCC_OscConfig+0x234>
 8002210:	f7ff fcbb 	bl	8001b8a <LL_RCC_HSE_Disable>
 8002214:	f7ff fc8c 	bl	8001b30 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fd04 	bl	8000c2c <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fd00 	bl	8000c2c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e268      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800223a:	f7ff fcb4 	bl	8001ba6 <LL_RCC_HSE_IsReady>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f1      	beq.n	8002228 <HAL_RCC_OscConfig+0x244>
 8002244:	e013      	b.n	800226e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fcf1 	bl	8000c2c <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe fced 	bl	8000c2c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e255      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002260:	f7ff fca1 	bl	8001ba6 <LL_RCC_HSE_IsReady>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f1      	bne.n	800224e <HAL_RCC_OscConfig+0x26a>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d04b      	beq.n	8002312 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x2a8>
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d113      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	f7ff fcb8 	bl	8001c00 <LL_RCC_HSI_IsReady>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2be>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e234      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fcbb 	bl	8001c22 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	e031      	b.n	8002312 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b6:	f7ff fc87 	bl	8001bc8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fcb7 	bl	8000c2c <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fcb3 	bl	8000c2c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e21b      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022d4:	f7ff fc94 	bl	8001c00 <LL_RCC_HSI_IsReady>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f1      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc9d 	bl	8001c22 <LL_RCC_HSI_SetCalibTrimming>
 80022e8:	e013      	b.n	8002312 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	f7ff fc7b 	bl	8001be4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fc9d 	bl	8000c2c <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fc99 	bl	8000c2c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e201      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002308:	f7ff fc7a 	bl	8001c00 <LL_RCC_HSI_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06e      	beq.n	80023fc <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d056      	beq.n	80023d4 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	429a      	cmp	r2, r3
 800233c:	d031      	beq.n	80023a2 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1da      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002360:	f7ff fc94 	bl	8001c8c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7fe fc62 	bl	8000c2c <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe fc5e 	bl	8000c2c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b11      	cmp	r3, #17
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1c6      	b.n	800270c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800237e:	f7ff fc95 	bl	8001cac <LL_RCC_LSI_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f1      	bne.n	800236c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002390:	f023 0210 	bic.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	f7ff fc63 	bl	8001c6c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fc41 	bl	8000c2c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fc3d 	bl	8000c2c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a5      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80023c0:	f7ff fc74 	bl	8001cac <LL_RCC_LSI_IsReady>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f1      	beq.n	80023ae <HAL_RCC_OscConfig+0x3ca>
 80023ca:	e017      	b.n	80023fc <HAL_RCC_OscConfig+0x418>
 80023cc:	20000008 	.word	0x20000008
 80023d0:	2000000c 	.word	0x2000000c
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	f7ff fc5a 	bl	8001c8c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fc28 	bl	8000c2c <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc24 	bl	8000c2c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b11      	cmp	r3, #17
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e18c      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80023f2:	f7ff fc5b 	bl	8001cac <LL_RCC_LSI_IsReady>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f1      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80d8 	beq.w	80025ba <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800240a:	f7ff fb71 	bl	8001af0 <LL_PWR_IsEnabledBkUpAccess>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002414:	f7ff fb52 	bl	8001abc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002418:	f7fe fc08 	bl	8000c2c <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7fe fc04 	bl	8000c2c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e16c      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002432:	f7ff fb5d 	bl	8001af0 <LL_PWR_IsEnabledBkUpAccess>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d07b      	beq.n	800253c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b85      	cmp	r3, #133	; 0x85
 800244a:	d003      	beq.n	8002454 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d109      	bne.n	8002468 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe fbe0 	bl	8000c2c <HAL_GetTick>
 800246c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fbd2 	bl	8000c2c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e138      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800249a:	f7ff fbd6 	bl	8001c4a <LL_RCC_LSE_IsReady>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ef      	beq.n	8002484 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b81      	cmp	r3, #129	; 0x81
 80024aa:	d003      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b85      	cmp	r3, #133	; 0x85
 80024b2:	d121      	bne.n	80024f8 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fbba 	bl	8000c2c <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fbac 	bl	8000c2c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e112      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ec      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80024f6:	e060      	b.n	80025ba <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fb98 	bl	8000c2c <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fb8a 	bl	8000c2c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0f0      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ec      	bne.n	8002514 <HAL_RCC_OscConfig+0x530>
 800253a:	e03e      	b.n	80025ba <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fb76 	bl	8000c2c <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fb68 	bl	8000c2c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0ce      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ec      	bne.n	8002558 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fb55 	bl	8000c2c <HAL_GetTick>
 8002582:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe fb47 	bl	8000c2c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0ad      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80025b0:	f7ff fb4b 	bl	8001c4a <LL_RCC_LSE_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a3 	beq.w	800270a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d076      	beq.n	80026b8 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d14b      	bne.n	800266a <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	f7ff fc76 	bl	8001ec2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fb29 	bl	8000c2c <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fb25 	bl	8000c2c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b0a      	cmp	r3, #10
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e08d      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80025f0:	f7ff fc75 	bl	8001ede <LL_RCC_PLL_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f1      	bne.n	80025de <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x730>)
 8002602:	4013      	ands	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002612:	0212      	lsls	r2, r2, #8
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002626:	430a      	orrs	r2, r1
 8002628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262c:	4313      	orrs	r3, r2
 800262e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	f7ff fc39 	bl	8001ea6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe faf2 	bl	8000c2c <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe faee 	bl	8000c2c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b0a      	cmp	r3, #10
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e056      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800265e:	f7ff fc3e 	bl	8001ede <LL_RCC_PLL_IsReady>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f1      	beq.n	800264c <HAL_RCC_OscConfig+0x668>
 8002668:	e04f      	b.n	800270a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	f7ff fc2a 	bl	8001ec2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002678:	f023 0303 	bic.w	r3, r3, #3
 800267c:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002688:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe facb 	bl	8000c2c <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fac7 	bl	8000c2c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b0a      	cmp	r3, #10
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e02f      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80026ac:	f7ff fc17 	bl	8001ede <LL_RCC_PLL_IsReady>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f1      	bne.n	800269a <HAL_RCC_OscConfig+0x6b6>
 80026b6:	e028      	b.n	800270a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e023      	b.n	800270c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d115      	bne.n	8002706 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10e      	bne.n	8002706 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	11c1808c 	.word	0x11c1808c

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e10f      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b89      	ldr	r3, [pc, #548]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d91b      	bls.n	8002772 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b86      	ldr	r3, [pc, #536]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4984      	ldr	r1, [pc, #528]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274a:	f7fe fa6f 	bl	8000c2c <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002750:	e008      	b.n	8002764 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002752:	f7fe fa6b 	bl	8000c2c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0f3      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002764:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d1ef      	bne.n	8002752 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fb28 	bl	8001dd8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002788:	f7fe fa50 	bl	8000c2c <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002790:	f7fe fa4c 	bl	8000c2c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0d4      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027a2:	f7ff fbda 	bl	8001f5a <LL_RCC_IsActiveFlag_HPRE>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f1      	beq.n	8002790 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d016      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb1e 	bl	8001dfe <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fa33 	bl	8000c2c <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ca:	f7fe fa2f 	bl	8000c2c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0b7      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027dc:	f7ff fbce 	bl	8001f7c <LL_RCC_IsActiveFlag_SHDHPRE>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f1      	beq.n	80027ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fb17 	bl	8001e2a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fa16 	bl	8000c2c <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002804:	f7fe fa12 	bl	8000c2c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e09a      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002816:	f7ff fbc3 	bl	8001fa0 <LL_RCC_IsActiveFlag_PPRE1>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f1      	beq.n	8002804 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fb0c 	bl	8001e50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002838:	f7fe f9f8 	bl	8000c2c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002840:	f7fe f9f4 	bl	8000c2c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e07c      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002852:	f7ff fbb6 	bl	8001fc2 <LL_RCC_IsActiveFlag_PPRE2>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f1      	beq.n	8002840 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d043      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d106      	bne.n	800287e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002870:	f7ff f999 	bl	8001ba6 <LL_RCC_HSE_IsReady>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11e      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e066      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d106      	bne.n	8002894 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002886:	f7ff fb2a 	bl	8001ede <LL_RCC_PLL_IsReady>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d113      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e05b      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800289c:	f7ff fa33 	bl	8001d06 <LL_RCC_MSI_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e050      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80028aa:	f7ff f9a9 	bl	8001c00 <LL_RCC_HSI_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e049      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fa6d 	bl	8001d9c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c2:	f7fe f9b3 	bl	8000c2c <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ca:	f7fe f9af 	bl	8000c2c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e035      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e0:	f7ff fa6f 	bl	8001dc2 <LL_RCC_GetSysClkSource>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1ec      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d21b      	bcs.n	8002936 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4913      	ldr	r1, [pc, #76]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290e:	f7fe f98d 	bl	8000c2c <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002914:	e008      	b.n	8002928 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002916:	f7fe f989 	bl	8000c2c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e011      	b.n	800294c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x23c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d1ef      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002936:	f000 f8b3 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 800293a:	4603      	mov	r3, r0
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_RCC_ClockConfig+0x240>)
 800293e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_ClockConfig+0x244>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f925 	bl	8000b94 <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58004000 	.word	0x58004000
 8002958:	20000008 	.word	0x20000008
 800295c:	2000000c 	.word	0x2000000c

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296e:	f7ff fa28 	bl	8001dc2 <LL_RCC_GetSysClkSource>
 8002972:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	f7ff fae6 	bl	8001f44 <LL_RCC_PLL_GetMainSource>
 8002978:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x2c>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d139      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d136      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800298c:	f7ff f9cb 	bl	8001d26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x62>
 8002996:	f7ff f9c6 	bl	8001d26 <LL_RCC_MSI_IsEnabledRangeSelect>
 800299a:	4603      	mov	r3, r0
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x4e>
 80029a0:	f7ff f9d1 	bl	8001d46 <LL_RCC_MSI_GetRange>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	e005      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x5a>
 80029ae:	f7ff f9d5 	bl	8001d5c <LL_RCC_MSI_GetRangeAfterStandby>
 80029b2:	4603      	mov	r3, r0
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a36      	ldr	r2, [pc, #216]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x134>)
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	e014      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x8c>
 80029c2:	f7ff f9b0 	bl	8001d26 <LL_RCC_MSI_IsEnabledRangeSelect>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0x7a>
 80029cc:	f7ff f9bb 	bl	8001d46 <LL_RCC_MSI_GetRange>
 80029d0:	4603      	mov	r3, r0
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	e005      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x86>
 80029da:	f7ff f9bf 	bl	8001d5c <LL_RCC_MSI_GetRangeAfterStandby>
 80029de:	4603      	mov	r3, r0
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x134>)
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d115      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f8:	e012      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e00c      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a0c:	f7ff f89e 	bl	8001b4c <LL_RCC_HSE_IsEnabledDiv2>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e001      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a1e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	f7ff f9cf 	bl	8001dc2 <LL_RCC_GetSysClkSource>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d12f      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a2a:	f7ff fa8b 	bl	8001f44 <LL_RCC_PLL_GetMainSource>
 8002a2e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0xde>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xe4>
 8002a3c:	e00d      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a40:	60fb      	str	r3, [r7, #12]
        break;
 8002a42:	e00d      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a44:	f7ff f882 	bl	8001b4c <LL_RCC_HSE_IsEnabledDiv2>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a50:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a56:	60fb      	str	r3, [r7, #12]
        break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	60fb      	str	r3, [r7, #12]
        break;
 8002a5e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a60:	f7ff fa4e 	bl	8001f00 <LL_RCC_PLL_GetN>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	fb03 f402 	mul.w	r4, r3, r2
 8002a6c:	f7ff fa5f 	bl	8001f2e <LL_RCC_PLL_GetDivider>
 8002a70:	4603      	mov	r3, r0
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	3301      	adds	r3, #1
 8002a76:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a7a:	f7ff fa4d 	bl	8001f18 <LL_RCC_PLL_GetR>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	0f5b      	lsrs	r3, r3, #29
 8002a82:	3301      	adds	r3, #1
 8002a84:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a88:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	08003e88 	.word	0x08003e88
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	01e84800 	.word	0x01e84800

08002aa0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b598      	push	{r3, r4, r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002aa4:	f7ff ff5c 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	f7ff f9e4 	bl	8001e76 <LL_RCC_GetAHBPrescaler>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd98      	pop	{r3, r4, r7, pc}
 8002ac4:	08003e48 	.word	0x08003e48

08002ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002ae0:	f7ff f9d4 	bl	8001e8c <LL_RCC_GetAHB3Prescaler>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9c      	lsrs	r4, r3, #18
 8002b04:	f7fe ffe8 	bl	8001ad8 <HAL_PWREx_GetVoltageRange>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f000 f80b 	bl	8002b28 <RCC_SetFlashLatency>
 8002b12:	4603      	mov	r3, r0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}
 8002b1c:	08003e88 	.word	0x08003e88
 8002b20:	08003e48 	.word	0x08003e48
 8002b24:	431bde83 	.word	0x431bde83

08002b28 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002b32:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <RCC_SetFlashLatency+0xfc>)
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3c:	6018      	str	r0, [r3, #0]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002b42:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <RCC_SetFlashLatency+0x100>)
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b4c:	6018      	str	r0, [r3, #0]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002b52:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <RCC_SetFlashLatency+0x104>)
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d11d      	bne.n	8002ba6 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6e:	e016      	b.n	8002b9e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b78:	4413      	add	r3, r2
 8002b7a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d808      	bhi.n	8002b98 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b8e:	4413      	add	r3, r2
 8002b90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b96:	e023      	b.n	8002be0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d9e5      	bls.n	8002b70 <RCC_SetFlashLatency+0x48>
 8002ba4:	e01c      	b.n	8002be0 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	e016      	b.n	8002bda <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d808      	bhi.n	8002bd4 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002bca:	4413      	add	r3, r2
 8002bcc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd2:	e005      	b.n	8002be0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d9e5      	bls.n	8002bac <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <RCC_SetFlashLatency+0x108>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 0207 	bic.w	r2, r3, #7
 8002be8:	4911      	ldr	r1, [pc, #68]	; (8002c30 <RCC_SetFlashLatency+0x108>)
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bf0:	f7fe f81c 	bl	8000c2c <HAL_GetTick>
 8002bf4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bf6:	e008      	b.n	8002c0a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bf8:	f7fe f818 	bl	8000c2c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e007      	b.n	8002c1a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <RCC_SetFlashLatency+0x108>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1ef      	bne.n	8002bf8 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3738      	adds	r7, #56	; 0x38
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	080030d0 	.word	0x080030d0
 8002c28:	080030d8 	.word	0x080030d8
 8002c2c:	080030e0 	.word	0x080030e0
 8002c30:	58004000 	.word	0x58004000

08002c34 <LL_RCC_LSE_IsReady>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d101      	bne.n	8002c4c <LL_RCC_LSE_IsReady+0x18>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <LL_RCC_LSE_IsReady+0x1a>
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_SetUSARTClockSource>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_SetI2SClockSource>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_SetLPUARTClockSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_SetI2CClockSource>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_SetLPTIMClockSource>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_SetRNGClockSource>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_SetADCClockSource>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_SetRTCClockSource>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_GetRTCClockSource>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_ForceBackupDomainReset>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d058      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002e3c:	f7fe fe3e 	bl	8001abc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e40:	f7fd fef4 	bl	8000c2c <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e46:	e009      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fd fef0 	bl	8000c2c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	74fb      	strb	r3, [r7, #19]
        break;
 8002e5a:	e006      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e5c:	4b7b      	ldr	r3, [pc, #492]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d1ee      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d13c      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002e70:	f7ff ffa7 	bl	8002dc2 <LL_RCC_GetRTCClockSource>
 8002e74:	4602      	mov	r2, r0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d00f      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e8c:	f7ff ffa5 	bl	8002dda <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e90:	f7ff ffb3 	bl	8002dfa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fec0 	bl	8000c2c <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fd febc 	bl	8000c2c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d902      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ec8:	f7ff feb4 	bl	8002c34 <LL_RCC_LSE_IsReady>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d1ee      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5b 	bl	8002d98 <LL_RCC_SetRTCClockSource>
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
 8002ee8:	e001      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fea9 	bl	8002c56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe9e 	bl	8002c56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fec0 	bl	8002cb0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fee6 	bl	8002d12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fedb 	bl	8002d12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fed0 	bl	8002d12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fea9 	bl	8002cda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fe9e 	bl	8002cda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fe93 	bl	8002cda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fe5e 	bl	8002c86 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fea5 	bl	8002d44 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003010:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fea3 	bl	8002d6e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003030:	d107      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003042:	7cbb      	ldrb	r3, [r7, #18]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	58000400 	.word	0x58000400

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1b64      	subs	r4, r4, r5
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2600      	movs	r6, #0
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4d0b      	ldr	r5, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 f820 	bl	80030a8 <_init>
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2600      	movs	r6, #0
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08003ec8 	.word	0x08003ec8
 800308c:	08003ec8 	.word	0x08003ec8
 8003090:	08003ec8 	.word	0x08003ec8
 8003094:	08003ecc 	.word	0x08003ecc

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <_init>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

080030b4 <_fini>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr
