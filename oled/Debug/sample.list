
sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f34  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e78  08003e78  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003e78  08003e78  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e78  08003e78  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000014  08003e94  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08003e94  00020488  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ed  00000000  00000000  0002ea9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00030d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00031d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019506  00000000  00000000  00032b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f03b  00000000  00000000  0004c07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5ec  00000000  00000000  0005b0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f56a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef8  00000000  00000000  000f56f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	08003054 	.word	0x08003054

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	08003054 	.word	0x08003054

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ae:	f000 fca7 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b2:	f000 f84b 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b6:	f000 f8d9 	bl	800036c <MX_GPIO_Init>
  MX_I2C2_Init();
 80001ba:	f000 f899 	bl	80002f0 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SSD1306_Init();  // initialise
 80001be:	f000 f90f 	bl	80003e0 <SSD1306_Init>

//	lets print hello world
	SSD1306_GotoXY (0,0);
 80001c2:	2100      	movs	r1, #0
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fa73 	bl	80006b0 <SSD1306_GotoXY>
	SSD1306_Puts ("HELLO", &Font_11x18, 1);
 80001ca:	2201      	movs	r2, #1
 80001cc:	491b      	ldr	r1, [pc, #108]	; (800023c <main+0x94>)
 80001ce:	481c      	ldr	r0, [pc, #112]	; (8000240 <main+0x98>)
 80001d0:	f000 fb04 	bl	80007dc <SSD1306_Puts>
	SSD1306_GotoXY (10, 30);
 80001d4:	211e      	movs	r1, #30
 80001d6:	200a      	movs	r0, #10
 80001d8:	f000 fa6a 	bl	80006b0 <SSD1306_GotoXY>
	SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	4917      	ldr	r1, [pc, #92]	; (800023c <main+0x94>)
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <main+0x9c>)
 80001e2:	f000 fafb 	bl	80007dc <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80001e6:	f000 f9bf 	bl	8000568 <SSD1306_UpdateScreen>

	HAL_Delay (2000);
 80001ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ee:	f000 fcfd 	bl	8000bec <HAL_Delay>


	char print[] = "A";
 80001f2:	2341      	movs	r3, #65	; 0x41
 80001f4:	80bb      	strh	r3, [r7, #4]

	while (1)
	{

		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET){
 80001f6:	2101      	movs	r1, #1
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fc:	f000 ff5c 	bl	80010b8 <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f7      	bne.n	80001f6 <main+0x4e>
			SSD1306_Clear();  // scroll entire screen
 8000206:	f000 fb0e 	bl	8000826 <SSD1306_Clear>
			SSD1306_GotoXY (0,0);
 800020a:	2100      	movs	r1, #0
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fa4f 	bl	80006b0 <SSD1306_GotoXY>
			SSD1306_Puts (print, &Font_11x18, 1);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2201      	movs	r2, #1
 8000216:	4909      	ldr	r1, [pc, #36]	; (800023c <main+0x94>)
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fadf 	bl	80007dc <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 800021e:	f000 f9a3 	bl	8000568 <SSD1306_UpdateScreen>
			print[0]+=1;
 8000222:	793b      	ldrb	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	713b      	strb	r3, [r7, #4]

			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800022a:	2120      	movs	r1, #32
 800022c:	4806      	ldr	r0, [pc, #24]	; (8000248 <main+0xa0>)
 800022e:	f000 ff71 	bl	8001114 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000236:	f000 fcd9 	bl	8000bec <HAL_Delay>
		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET){
 800023a:	e7dc      	b.n	80001f6 <main+0x4e>
 800023c:	20000000 	.word	0x20000000
 8000240:	0800306c 	.word	0x0800306c
 8000244:	08003074 	.word	0x08003074
 8000248:	48000400 	.word	0x48000400

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09a      	sub	sp, #104	; 0x68
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0320 	add.w	r3, r7, #32
 8000256:	2248      	movs	r2, #72	; 0x48
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fef2 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0308 	add.w	r3, r7, #8
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
 8000270:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <SystemClock_Config+0xa0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800027a:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <SystemClock_Config+0xa0>)
 800027c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <SystemClock_Config+0xa0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028e:	2320      	movs	r3, #32
 8000290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000296:	2300      	movs	r3, #0
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800029a:	2360      	movs	r3, #96	; 0x60
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0320 	add.w	r3, r7, #32
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fe72 	bl	8001f90 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002b2:	f000 f88f 	bl	80003d4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002b6:	234f      	movs	r3, #79	; 0x4f
 80002b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f9f5 	bl	80026c4 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e0:	f000 f878 	bl	80003d4 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3768      	adds	r7, #104	; 0x68
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	58000400 	.word	0x58000400

080002f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_I2C2_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <MX_I2C2_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000004;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_I2C2_Init+0x74>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_I2C2_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_I2C2_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_I2C2_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_I2C2_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_I2C2_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_I2C2_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_I2C2_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800032a:	480e      	ldr	r0, [pc, #56]	; (8000364 <MX_I2C2_Init+0x74>)
 800032c:	f000 ff0b 	bl	8001146 <HAL_I2C_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000336:	f000 f84d 	bl	80003d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033a:	2100      	movs	r1, #0
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <MX_I2C2_Init+0x74>)
 800033e:	f001 fafd 	bl	800193c <HAL_I2CEx_ConfigAnalogFilter>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f844 	bl	80003d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800034c:	2100      	movs	r1, #0
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_I2C2_Init+0x74>)
 8000350:	f001 fb3e 	bl	80019d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f83b 	bl	80003d4 <Error_Handler>
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	  HAL_Delay(1000);
//	}
  /* USER CODE END I2C2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000438 	.word	0x20000438
 8000368:	40005800 	.word	0x40005800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	2001      	movs	r0, #1
 8000382:	f7ff fef9 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	2002      	movs	r0, #2
 8000388:	f7ff fef6 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2120      	movs	r1, #32
 8000390:	480f      	ldr	r0, [pc, #60]	; (80003d0 <MX_GPIO_Init+0x64>)
 8000392:	f000 fea8 	bl	80010e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000396:	2320      	movs	r3, #32
 8000398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <MX_GPIO_Init+0x64>)
 80003ac:	f000 fd24 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80003b0:	2301      	movs	r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f000 fd18 	bl	8000df8 <HAL_GPIO_Init>

}
 80003c8:	bf00      	nop
 80003ca:	3718      	adds	r7, #24
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	48000400 	.word	0x48000400

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80003e6:	f000 fa27 	bl	8000838 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80003ee:	2201      	movs	r2, #1
 80003f0:	2178      	movs	r1, #120	; 0x78
 80003f2:	485b      	ldr	r0, [pc, #364]	; (8000560 <SSD1306_Init+0x180>)
 80003f4:	f001 f82a 	bl	800144c <HAL_I2C_IsDeviceReady>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	e0a9      	b.n	8000556 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000402:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000406:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000408:	e002      	b.n	8000410 <SSD1306_Init+0x30>
		p--;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3b01      	subs	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f9      	bne.n	800040a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000416:	22ae      	movs	r2, #174	; 0xae
 8000418:	2100      	movs	r1, #0
 800041a:	2078      	movs	r0, #120	; 0x78
 800041c:	f000 fa68 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000420:	2220      	movs	r2, #32
 8000422:	2100      	movs	r1, #0
 8000424:	2078      	movs	r0, #120	; 0x78
 8000426:	f000 fa63 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800042a:	2210      	movs	r2, #16
 800042c:	2100      	movs	r1, #0
 800042e:	2078      	movs	r0, #120	; 0x78
 8000430:	f000 fa5e 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000434:	22b0      	movs	r2, #176	; 0xb0
 8000436:	2100      	movs	r1, #0
 8000438:	2078      	movs	r0, #120	; 0x78
 800043a:	f000 fa59 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800043e:	22c8      	movs	r2, #200	; 0xc8
 8000440:	2100      	movs	r1, #0
 8000442:	2078      	movs	r0, #120	; 0x78
 8000444:	f000 fa54 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	2078      	movs	r0, #120	; 0x78
 800044e:	f000 fa4f 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000452:	2210      	movs	r2, #16
 8000454:	2100      	movs	r1, #0
 8000456:	2078      	movs	r0, #120	; 0x78
 8000458:	f000 fa4a 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800045c:	2240      	movs	r2, #64	; 0x40
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	; 0x78
 8000462:	f000 fa45 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000466:	2281      	movs	r2, #129	; 0x81
 8000468:	2100      	movs	r1, #0
 800046a:	2078      	movs	r0, #120	; 0x78
 800046c:	f000 fa40 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000470:	22ff      	movs	r2, #255	; 0xff
 8000472:	2100      	movs	r1, #0
 8000474:	2078      	movs	r0, #120	; 0x78
 8000476:	f000 fa3b 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800047a:	22a1      	movs	r2, #161	; 0xa1
 800047c:	2100      	movs	r1, #0
 800047e:	2078      	movs	r0, #120	; 0x78
 8000480:	f000 fa36 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000484:	22a6      	movs	r2, #166	; 0xa6
 8000486:	2100      	movs	r1, #0
 8000488:	2078      	movs	r0, #120	; 0x78
 800048a:	f000 fa31 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800048e:	22a8      	movs	r2, #168	; 0xa8
 8000490:	2100      	movs	r1, #0
 8000492:	2078      	movs	r0, #120	; 0x78
 8000494:	f000 fa2c 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000498:	223f      	movs	r2, #63	; 0x3f
 800049a:	2100      	movs	r1, #0
 800049c:	2078      	movs	r0, #120	; 0x78
 800049e:	f000 fa27 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004a2:	22a4      	movs	r2, #164	; 0xa4
 80004a4:	2100      	movs	r1, #0
 80004a6:	2078      	movs	r0, #120	; 0x78
 80004a8:	f000 fa22 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80004ac:	22d3      	movs	r2, #211	; 0xd3
 80004ae:	2100      	movs	r1, #0
 80004b0:	2078      	movs	r0, #120	; 0x78
 80004b2:	f000 fa1d 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2078      	movs	r0, #120	; 0x78
 80004bc:	f000 fa18 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80004c0:	22d5      	movs	r2, #213	; 0xd5
 80004c2:	2100      	movs	r1, #0
 80004c4:	2078      	movs	r0, #120	; 0x78
 80004c6:	f000 fa13 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80004ca:	22f0      	movs	r2, #240	; 0xf0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2078      	movs	r0, #120	; 0x78
 80004d0:	f000 fa0e 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80004d4:	22d9      	movs	r2, #217	; 0xd9
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	; 0x78
 80004da:	f000 fa09 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80004de:	2222      	movs	r2, #34	; 0x22
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	; 0x78
 80004e4:	f000 fa04 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80004e8:	22da      	movs	r2, #218	; 0xda
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	; 0x78
 80004ee:	f000 f9ff 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80004f2:	2212      	movs	r2, #18
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	; 0x78
 80004f8:	f000 f9fa 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80004fc:	22db      	movs	r2, #219	; 0xdb
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	; 0x78
 8000502:	f000 f9f5 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000506:	2220      	movs	r2, #32
 8000508:	2100      	movs	r1, #0
 800050a:	2078      	movs	r0, #120	; 0x78
 800050c:	f000 f9f0 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000510:	228d      	movs	r2, #141	; 0x8d
 8000512:	2100      	movs	r1, #0
 8000514:	2078      	movs	r0, #120	; 0x78
 8000516:	f000 f9eb 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800051a:	2214      	movs	r2, #20
 800051c:	2100      	movs	r1, #0
 800051e:	2078      	movs	r0, #120	; 0x78
 8000520:	f000 f9e6 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000524:	22af      	movs	r2, #175	; 0xaf
 8000526:	2100      	movs	r1, #0
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 f9e1 	bl	80008f0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800052e:	222e      	movs	r2, #46	; 0x2e
 8000530:	2100      	movs	r1, #0
 8000532:	2078      	movs	r0, #120	; 0x78
 8000534:	f000 f9dc 	bl	80008f0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 f843 	bl	80005c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800053e:	f000 f813 	bl	8000568 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <SSD1306_Init+0x184>)
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SSD1306_Init+0x184>)
 800054a:	2200      	movs	r2, #0
 800054c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SSD1306_Init+0x184>)
 8000550:	2201      	movs	r2, #1
 8000552:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000438 	.word	0x20000438
 8000564:	20000430 	.word	0x20000430

08000568 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	e01d      	b.n	80005b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	3b50      	subs	r3, #80	; 0x50
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 f9b6 	bl	80008f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 f9b1 	bl	80008f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800058e:	2210      	movs	r2, #16
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 f9ac 	bl	80008f0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	01db      	lsls	r3, r3, #7
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <SSD1306_UpdateScreen+0x58>)
 800059e:	441a      	add	r2, r3
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	2078      	movs	r0, #120	; 0x78
 80005a6:	f000 f95b 	bl	8000860 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3301      	adds	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d9de      	bls.n	8000574 <SSD1306_UpdateScreen+0xc>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000030 	.word	0x20000030

080005c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <SSD1306_Fill+0x14>
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <SSD1306_Fill+0x16>
 80005d8:	23ff      	movs	r3, #255	; 0xff
 80005da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005de:	4619      	mov	r1, r3
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <SSD1306_Fill+0x2c>)
 80005e2:	f002 fd2f 	bl	8003044 <memset>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000030 	.word	0x20000030

080005f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	460b      	mov	r3, r1
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	70fb      	strb	r3, [r7, #3]
	if (
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b7f      	cmp	r3, #127	; 0x7f
 800060a:	d848      	bhi.n	800069e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	2b3f      	cmp	r3, #63	; 0x3f
 8000610:	d845      	bhi.n	800069e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SSD1306_DrawPixel+0xb4>)
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d11a      	bne.n	8000664 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800062e:	88fa      	ldrh	r2, [r7, #6]
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b298      	uxth	r0, r3
 8000636:	4603      	mov	r3, r0
 8000638:	01db      	lsls	r3, r3, #7
 800063a:	4413      	add	r3, r2
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	b25a      	sxtb	r2, r3
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b259      	sxtb	r1, r3
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	4603      	mov	r3, r0
 8000658:	01db      	lsls	r3, r3, #7
 800065a:	4413      	add	r3, r2
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 8000660:	54d1      	strb	r1, [r2, r3]
 8000662:	e01d      	b.n	80006a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b298      	uxth	r0, r3
 800066c:	4603      	mov	r3, r0
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	4413      	add	r3, r2
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	b25a      	sxtb	r2, r3
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	b25b      	sxtb	r3, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	b25b      	sxtb	r3, r3
 800068a:	4013      	ands	r3, r2
 800068c:	b259      	sxtb	r1, r3
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	4603      	mov	r3, r0
 8000692:	01db      	lsls	r3, r3, #7
 8000694:	4413      	add	r3, r2
 8000696:	b2c9      	uxtb	r1, r1
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 800069a:	54d1      	strb	r1, [r2, r3]
 800069c:	e000      	b.n	80006a0 <SSD1306_DrawPixel+0xac>
		return;
 800069e:	bf00      	nop
	}
}
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000430 	.word	0x20000430
 80006ac:	20000030 	.word	0x20000030

080006b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	4613      	mov	r3, r2
 80006be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <SSD1306_GotoXY+0x28>)
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <SSD1306_GotoXY+0x28>)
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	8053      	strh	r3, [r2, #2]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000430 	.word	0x20000430

080006dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <SSD1306_Putc+0xfc>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
	if (
 80006f8:	2b7f      	cmp	r3, #127	; 0x7f
 80006fa:	dc07      	bgt.n	800070c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <SSD1306_Putc+0xfc>)
 80006fe:	885b      	ldrh	r3, [r3, #2]
 8000700:	461a      	mov	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000708:	2b3f      	cmp	r3, #63	; 0x3f
 800070a:	dd01      	ble.n	8000710 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800070c:	2300      	movs	r3, #0
 800070e:	e05e      	b.n	80007ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e04b      	b.n	80007ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	3b20      	subs	r3, #32
 800071e:	6839      	ldr	r1, [r7, #0]
 8000720:	7849      	ldrb	r1, [r1, #1]
 8000722:	fb01 f303 	mul.w	r3, r1, r3
 8000726:	4619      	mov	r1, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	440b      	add	r3, r1
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e030      	b.n	800079c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d010      	beq.n	800076c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SSD1306_Putc+0xfc>)
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	b29b      	uxth	r3, r3
 8000752:	4413      	add	r3, r2
 8000754:	b298      	uxth	r0, r3
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <SSD1306_Putc+0xfc>)
 8000758:	885a      	ldrh	r2, [r3, #2]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	4619      	mov	r1, r3
 8000766:	f7ff ff45 	bl	80005f4 <SSD1306_DrawPixel>
 800076a:	e014      	b.n	8000796 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <SSD1306_Putc+0xfc>)
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	b29b      	uxth	r3, r3
 8000774:	4413      	add	r3, r2
 8000776:	b298      	uxth	r0, r3
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <SSD1306_Putc+0xfc>)
 800077a:	885a      	ldrh	r2, [r3, #2]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b299      	uxth	r1, r3
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f7ff ff2f 	bl	80005f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	3301      	adds	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d3c8      	bcc.n	800073a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	461a      	mov	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d3ad      	bcc.n	8000716 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <SSD1306_Putc+0xfc>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SSD1306_Putc+0xfc>)
 80007ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000430 	.word	0x20000430

080007dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	4613      	mov	r3, r2
 80007e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80007ea:	e012      	b.n	8000812 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff71 	bl	80006dc <SSD1306_Putc>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d002      	beq.n	800080c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	e008      	b.n	800081e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1e8      	bne.n	80007ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	781b      	ldrb	r3, [r3, #0]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff feca 	bl	80005c4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000830:	f7ff fe9a 	bl	8000568 <SSD1306_UpdateScreen>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <ssd1306_I2C_Init+0x24>)
 8000840:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000842:	e002      	b.n	800084a <ssd1306_I2C_Init+0x12>
		p--;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
	while(p>0)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f9      	bne.n	8000844 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	0003d090 	.word	0x0003d090

08000860 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b0c7      	sub	sp, #284	; 0x11c
 8000864:	af02      	add	r7, sp, #8
 8000866:	4604      	mov	r4, r0
 8000868:	4608      	mov	r0, r1
 800086a:	4639      	mov	r1, r7
 800086c:	600a      	str	r2, [r1, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	4622      	mov	r2, r4
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	4602      	mov	r2, r0
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	460a      	mov	r2, r1
 8000880:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	1dba      	adds	r2, r7, #6
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000892:	e010      	b.n	80008b6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000894:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000898:	463a      	mov	r2, r7
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	441a      	add	r2, r3
 800089e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008a2:	3301      	adds	r3, #1
 80008a4:	7811      	ldrb	r1, [r2, #0]
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80008ac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008b0:	3301      	adds	r3, #1
 80008b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	1d3a      	adds	r2, r7, #4
 80008be:	8812      	ldrh	r2, [r2, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8e7      	bhi.n	8000894 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b299      	uxth	r1, r3
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	f107 020c 	add.w	r2, r7, #12
 80008d6:	200a      	movs	r0, #10
 80008d8:	9000      	str	r0, [sp, #0]
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <ssd1306_I2C_WriteMulti+0x8c>)
 80008dc:	f000 fcc2 	bl	8001264 <HAL_I2C_Master_Transmit>
}
 80008e0:	bf00      	nop
 80008e2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000438 	.word	0x20000438

080008f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	460b      	mov	r3, r1
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	4613      	mov	r3, r2
 8000900:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000906:	797b      	ldrb	r3, [r7, #5]
 8000908:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	b299      	uxth	r1, r3
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	230a      	movs	r3, #10
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <ssd1306_I2C_Write+0x38>)
 800091a:	f000 fca3 	bl	8001264 <HAL_I2C_Master_Transmit>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000438 	.word	0x20000438

0800092c <LL_AHB2_GRP1_EnableClock>:
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800093a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800096a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	; 0x58
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2238      	movs	r2, #56	; 0x38
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fb43 	bl	8003044 <memset>
  if(hi2c->Instance==I2C2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <HAL_I2C_MspInit+0xb0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13b      	bne.n	8000a40 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009cc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f9f6 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f7ff fcf7 	bl	80003d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff ffa0 	bl	800092c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff ff9d 	bl	800092c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = sda_Pin;
 80009f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a04:	2304      	movs	r3, #4
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(sda_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f000 f9f1 	bl	8000df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = scl_Pin;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(scl_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_I2C_MspInit+0xb4>)
 8000a34:	f000 f9e0 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a38:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a3c:	f7ff ff8e 	bl	800095c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3758      	adds	r7, #88	; 0x58
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	48000400 	.word	0x48000400

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 f88d 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab0:	f7ff fff5 	bl	8000a9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ada:	f002 fa8f 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fb63 	bl	80001a8 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   r0, =_estack
 8000ae4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000af0:	08003e80 	.word	0x08003e80
  ldr r2, =_sbss
 8000af4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000af8:	20000488 	.word	0x20000488

08000afc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 f942 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b10:	f001 ff9c 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_Init+0x3c>)
 8000b18:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f000 f810 	bl	8000b40 <HAL_InitTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	e001      	b.n	8000b30 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2c:	f7ff ff2e 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d024      	beq.n	8000b9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	f001 ff7a 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f936 	bl	8000dde <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b86:	f000 f910 	bl	8000daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	20000484 	.word	0x20000484

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000484 	.word	0x20000484

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000010 	.word	0x20000010

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d74:	f7ff ff90 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff49 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff60 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff92 	bl	8000cec <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffb2 	bl	8000d50 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e140      	b.n	800108a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8132 	beq.w	8001084 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	2b11      	cmp	r3, #17
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 0201 	and.w	r2, r3, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0xea>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 808c 	beq.w	8001084 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	2207      	movs	r2, #7
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1bc>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a44      	ldr	r2, [pc, #272]	; (80010ac <HAL_GPIO_Init+0x2b4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1b8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a43      	ldr	r2, [pc, #268]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1b4>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1be>
 8000fac:	2307      	movs	r3, #7
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1be>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1be>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc6:	4938      	ldr	r1, [pc, #224]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fda:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8001004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001008:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f aeb7 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	58000800 	.word	0x58000800

080010b8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e001      	b.n	80010da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f6:	787b      	ldrb	r3, [r7, #1]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fc:	887a      	ldrh	r2, [r7, #2]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001102:	e002      	b.n	800110a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43d9      	mvns	r1, r3
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	400b      	ands	r3, r1
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e081      	b.n	800125c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fc13 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2224      	movs	r2, #36	; 0x24
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001196:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d107      	bne.n	80011c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	e006      	b.n	80011ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d104      	bne.n	80011e0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001202:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	ea42 0103 	orr.w	r1, r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	021a      	lsls	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69d9      	ldr	r1, [r3, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0201 	orr.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2220      	movs	r2, #32
 8001248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	461a      	mov	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	817b      	strh	r3, [r7, #10]
 8001274:	4613      	mov	r3, r2
 8001276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b20      	cmp	r3, #32
 8001282:	f040 80da 	bne.w	800143a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_I2C_Master_Transmit+0x30>
 8001290:	2302      	movs	r3, #2
 8001292:	e0d3      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800129c:	f7ff fc9c 	bl	8000bd8 <HAL_GetTick>
 80012a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2319      	movs	r3, #25
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 f9f6 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0be      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2221      	movs	r2, #33	; 0x21
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2210      	movs	r2, #16
 80012ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	893a      	ldrh	r2, [r7, #8]
 80012de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d90e      	bls.n	800130e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	8979      	ldrh	r1, [r7, #10]
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_I2C_Master_Transmit+0x1e0>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 faec 	bl	80018e4 <I2C_TransferConfig>
 800130c:	e06c      	b.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131c:	b2da      	uxtb	r2, r3
 800131e:	8979      	ldrh	r1, [r7, #10]
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <HAL_I2C_Master_Transmit+0x1e0>)
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 fadb 	bl	80018e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800132e:	e05b      	b.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	6a39      	ldr	r1, [r7, #32]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f9f3 	bl	8001720 <I2C_WaitOnTXISFlagUntilTimeout>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e07b      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d034      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001382:	2b00      	cmp	r3, #0
 8001384:	d130      	bne.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2200      	movs	r2, #0
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 f985 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e04d      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2bff      	cmp	r3, #255	; 0xff
 80013a8:	d90e      	bls.n	80013c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	8979      	ldrh	r1, [r7, #10]
 80013b8:	2300      	movs	r3, #0
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 fa8f 	bl	80018e4 <I2C_TransferConfig>
 80013c6:	e00f      	b.n	80013e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	8979      	ldrh	r1, [r7, #10]
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fa7e 	bl	80018e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d19e      	bne.n	8001330 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	6a39      	ldr	r1, [r7, #32]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f9d2 	bl	80017a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e01a      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2220      	movs	r2, #32
 800140c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_I2C_Master_Transmit+0x1e4>)
 800141a:	400b      	ands	r3, r1
 800141c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800143a:	2302      	movs	r3, #2
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	80002000 	.word	0x80002000
 8001448:	fe00e800 	.word	0xfe00e800

0800144c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b20      	cmp	r3, #32
 800146a:	f040 80f1 	bne.w	8001650 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800147c:	d101      	bne.n	8001482 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	e0e7      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_I2C_IsDeviceReady+0x44>
 800148c:	2302      	movs	r3, #2
 800148e:	e0e0      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_I2C_IsDeviceReady+0x72>
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014bc:	e004      	b.n	80014c8 <HAL_I2C_IsDeviceReady+0x7c>
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb83 	bl	8000bd8 <HAL_GetTick>
 80014d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	2b20      	cmp	r3, #32
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b10      	cmp	r3, #16
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001500:	e034      	b.n	800156c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001508:	d01a      	beq.n	8001540 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800150a:	f7ff fb65 	bl	8000bd8 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d302      	bcc.n	8001520 <HAL_I2C_IsDeviceReady+0xd4>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e088      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	2b20      	cmp	r3, #32
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b10      	cmp	r3, #16
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800156c:	7ffb      	ldrb	r3, [r7, #31]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HAL_I2C_IsDeviceReady+0x12c>
 8001572:	7fbb      	ldrb	r3, [r7, #30]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0c4      	beq.n	8001502 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b10      	cmp	r3, #16
 8001584:	d01a      	beq.n	80015bc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f885 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e058      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2220      	movs	r2, #32
 80015a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e04a      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	2120      	movs	r1, #32
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f86a 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e03d      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2210      	movs	r2, #16
 80015dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2220      	movs	r2, #32
 80015e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d118      	bne.n	8001620 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f849 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e01c      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	f63f af3b 	bhi.w	80014a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001650:	2302      	movs	r3, #2
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d103      	bne.n	8001678 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d007      	beq.n	8001696 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	619a      	str	r2, [r3, #24]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b0:	e022      	b.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d01e      	beq.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ba:	f7ff fa8d 	bl	8000bd8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d302      	bcc.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d113      	bne.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f043 0220 	orr.w	r2, r3, #32
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e00f      	b.n	8001718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	4013      	ands	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	429a      	cmp	r2, r3
 8001714:	d0cd      	beq.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800172c:	e02c      	b.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f870 	bl	8001818 <I2C_IsAcknowledgeFailed>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e02a      	b.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001748:	d01e      	beq.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff fa45 	bl	8000bd8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	d1cb      	bne.n	800172e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ac:	e028      	b.n	8001800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f830 	bl	8001818 <I2C_IsAcknowledgeFailed>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e026      	b.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff fa09 	bl	8000bd8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d302      	bcc.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d113      	bne.n	8001800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e007      	b.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b20      	cmp	r3, #32
 800180c:	d1cf      	bne.n	80017ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b10      	cmp	r3, #16
 8001830:	d151      	bne.n	80018d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001832:	e022      	b.n	800187a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183a:	d01e      	beq.n	800187a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183c:	f7ff f9cc 	bl	8000bd8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d302      	bcc.n	8001852 <I2C_IsAcknowledgeFailed+0x3a>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d113      	bne.n	800187a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f043 0220 	orr.w	r2, r3, #32
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e02e      	b.n	80018d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d1d5      	bne.n	8001834 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2220      	movs	r2, #32
 8001896:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff fede 	bl	800165a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80018aa:	400b      	ands	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f043 0204 	orr.w	r2, r3, #4
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	fe00e800 	.word	0xfe00e800

080018e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	817b      	strh	r3, [r7, #10]
 80018f2:	4613      	mov	r3, r2
 80018f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	0d5b      	lsrs	r3, r3, #21
 8001900:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <I2C_TransferConfig+0x54>)
 8001906:	430b      	orrs	r3, r1
 8001908:	43db      	mvns	r3, r3
 800190a:	ea02 0103 	and.w	r1, r2, r3
 800190e:	897b      	ldrh	r3, [r7, #10]
 8001910:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001914:	7a7b      	ldrb	r3, [r7, #9]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	431a      	orrs	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	03ff63ff 	.word	0x03ff63ff

0800193c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	d138      	bne.n	80019c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800195c:	2302      	movs	r3, #2
 800195e:	e032      	b.n	80019c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800198e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d139      	bne.n	8001a5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e033      	b.n	8001a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
  }
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	58000400 	.word	0x58000400

08001a84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_PWREx_GetVoltageRange+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	58000400 	.word	0x58000400

08001a9c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aac:	d101      	bne.n	8001ab2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	58000400 	.word	0x58000400

08001ac0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b0a:	d101      	bne.n	8001b10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b64:	d101      	bne.n	8001b6a <LL_RCC_HSE_IsReady+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_RCC_HSE_IsReady+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d101      	bne.n	8001bc4 <LL_RCC_HSI_IsReady+0x18>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_RCC_HSI_IsReady+0x1a>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d101      	bne.n	8001c0e <LL_RCC_LSE_IsReady+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_RCC_LSE_IsReady+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_LSI_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_LSI_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d101      	bne.n	8001cc8 <LL_RCC_MSI_IsReady+0x16>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_RCC_MSI_IsReady+0x18>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d101      	bne.n	8001ce8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dba:	f023 020f 	bic.w	r2, r3, #15
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e9c:	d101      	bne.n	8001ea2 <LL_RCC_PLL_IsReady+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_RCC_PLL_IsReady+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d101      	bne.n	8001f1e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d101      	bne.n	8001f42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f5e:	d101      	bne.n	8001f64 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f80:	d101      	bne.n	8001f86 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e38a      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa2:	f7ff fee4 	bl	8001d6e <LL_RCC_GetSysClkSource>
 8001fa6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	f7ff ffa2 	bl	8001ef0 <LL_RCC_PLL_GetMainSource>
 8001fac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80c9 	beq.w	800214e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x3e>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d17b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d178      	bne.n	80020c0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fce:	f7ff fe70 	bl	8001cb2 <LL_RCC_MSI_IsReady>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x54>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e369      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x72>
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	e006      	b.n	8002010 <HAL_RCC_OscConfig+0x80>
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	4293      	cmp	r3, r2
 8002012:	d222      	bcs.n	800205a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fd2b 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e347      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe64 	bl	8001d20 <LL_RCC_MSI_SetCalibTrimming>
 8002058:	e021      	b.n	800209e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe4b 	bl	8001d20 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fcf0 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e30c      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800209e:	f000 fcd5 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4ab4      	ldr	r2, [pc, #720]	; (8002378 <HAL_RCC_OscConfig+0x3e8>)
 80020a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020a8:	4bb4      	ldr	r3, [pc, #720]	; (800237c <HAL_RCC_OscConfig+0x3ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fd47 	bl	8000b40 <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d047      	beq.n	800214c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	e2fb      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02c      	beq.n	8002122 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020c8:	f7ff fdd7 	bl	8001c7a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fd84 	bl	8000bd8 <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d4:	f7fe fd80 	bl	8000bd8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e2e8      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020e6:	f7ff fde4 	bl	8001cb2 <LL_RCC_MSI_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f1      	beq.n	80020d4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe00 	bl	8001d20 <LL_RCC_MSI_SetCalibTrimming>
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002122:	f7ff fdb8 	bl	8001c96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002126:	f7fe fd57 	bl	8000bd8 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212e:	f7fe fd53 	bl	8000bd8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e2bb      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002140:	f7ff fdb7 	bl	8001cb2 <LL_RCC_MSI_IsReady>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x19e>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800214c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d05f      	beq.n	800221a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d005      	beq.n	800216c <HAL_RCC_OscConfig+0x1dc>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d10d      	bne.n	8002182 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d10a      	bne.n	8002182 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	f7ff fcf1 	bl	8001b52 <LL_RCC_HSE_IsReady>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d050      	beq.n	8002218 <HAL_RCC_OscConfig+0x288>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d14c      	bne.n	8002218 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e29a      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_OscConfig+0x218>
 80021a2:	f7ff fcba 	bl	8001b1a <LL_RCC_HSE_Enable>
 80021a6:	e00d      	b.n	80021c4 <HAL_RCC_OscConfig+0x234>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80021b0:	d104      	bne.n	80021bc <HAL_RCC_OscConfig+0x22c>
 80021b2:	f7ff fc85 	bl	8001ac0 <LL_RCC_HSE_EnableTcxo>
 80021b6:	f7ff fcb0 	bl	8001b1a <LL_RCC_HSE_Enable>
 80021ba:	e003      	b.n	80021c4 <HAL_RCC_OscConfig+0x234>
 80021bc:	f7ff fcbb 	bl	8001b36 <LL_RCC_HSE_Disable>
 80021c0:	f7ff fc8c 	bl	8001adc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d012      	beq.n	80021f2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fd04 	bl	8000bd8 <HAL_GetTick>
 80021d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe fd00 	bl	8000bd8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e268      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80021e6:	f7ff fcb4 	bl	8001b52 <LL_RCC_HSE_IsReady>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f1      	beq.n	80021d4 <HAL_RCC_OscConfig+0x244>
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe fcf1 	bl	8000bd8 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fa:	f7fe fced 	bl	8000bd8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e255      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 800220c:	f7ff fca1 	bl	8001b52 <LL_RCC_HSE_IsReady>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f1      	bne.n	80021fa <HAL_RCC_OscConfig+0x26a>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d04b      	beq.n	80022be <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x2a8>
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d113      	bne.n	800225a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d110      	bne.n	800225a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	f7ff fcb8 	bl	8001bac <LL_RCC_HSI_IsReady>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x2be>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e234      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fcbb 	bl	8001bce <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002258:	e031      	b.n	80022be <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002262:	f7ff fc87 	bl	8001b74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7fe fcb7 	bl	8000bd8 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe fcb3 	bl	8000bd8 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e21b      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002280:	f7ff fc94 	bl	8001bac <LL_RCC_HSI_IsReady>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f1      	beq.n	800226e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc9d 	bl	8001bce <LL_RCC_HSI_SetCalibTrimming>
 8002294:	e013      	b.n	80022be <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	f7ff fc7b 	bl	8001b90 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fc9d 	bl	8000bd8 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe fc99 	bl	8000bd8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e201      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022b4:	f7ff fc7a 	bl	8001bac <LL_RCC_HSI_IsReady>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f1      	bne.n	80022a2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06e      	beq.n	80023a8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d056      	beq.n	8002380 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d031      	beq.n	800234e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1da      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800230c:	f7ff fc94 	bl	8001c38 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002310:	f7fe fc62 	bl	8000bd8 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe fc5e 	bl	8000bd8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b11      	cmp	r3, #17
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1c6      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800232a:	f7ff fc95 	bl	8001c58 <LL_RCC_LSI_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f1      	bne.n	8002318 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233c:	f023 0210 	bic.w	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	f7ff fc63 	bl	8001c18 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fc41 	bl	8000bd8 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe fc3d 	bl	8000bd8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b11      	cmp	r3, #17
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a5      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800236c:	f7ff fc74 	bl	8001c58 <LL_RCC_LSI_IsReady>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_OscConfig+0x3ca>
 8002376:	e017      	b.n	80023a8 <HAL_RCC_OscConfig+0x418>
 8002378:	20000008 	.word	0x20000008
 800237c:	2000000c 	.word	0x2000000c
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	f7ff fc5a 	bl	8001c38 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fc28 	bl	8000bd8 <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7fe fc24 	bl	8000bd8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b11      	cmp	r3, #17
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e18c      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800239e:	f7ff fc5b 	bl	8001c58 <LL_RCC_LSI_IsReady>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f1      	bne.n	800238c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80d8 	beq.w	8002566 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80023b6:	f7ff fb71 	bl	8001a9c <LL_PWR_IsEnabledBkUpAccess>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023c0:	f7ff fb52 	bl	8001a68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fc08 	bl	8000bd8 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7fe fc04 	bl	8000bd8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e16c      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80023de:	f7ff fb5d 	bl	8001a9c <LL_PWR_IsEnabledBkUpAccess>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d07b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b85      	cmp	r3, #133	; 0x85
 80023f6:	d003      	beq.n	8002400 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d109      	bne.n	8002414 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fbe0 	bl	8000bd8 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fbd2 	bl	8000bd8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e138      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002446:	f7ff fbd6 	bl	8001bf6 <LL_RCC_LSE_IsReady>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b81      	cmp	r3, #129	; 0x81
 8002456:	d003      	beq.n	8002460 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b85      	cmp	r3, #133	; 0x85
 800245e:	d121      	bne.n	80024a4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fbba 	bl	8000bd8 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fbac 	bl	8000bd8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e112      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ec      	beq.n	800247c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80024a2:	e060      	b.n	8002566 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fb98 	bl	8000bd8 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fb8a 	bl	8000bd8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0f0      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ec      	bne.n	80024c0 <HAL_RCC_OscConfig+0x530>
 80024e6:	e03e      	b.n	8002566 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fb76 	bl	8000bd8 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fb68 	bl	8000bd8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0ce      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ec      	bne.n	8002504 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe fb55 	bl	8000bd8 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fb47 	bl	8000bd8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0ad      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800255c:	f7ff fb4b 	bl	8001bf6 <LL_RCC_LSE_IsReady>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a3 	beq.w	80026b6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d076      	beq.n	8002664 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	2b02      	cmp	r3, #2
 800257c:	d14b      	bne.n	8002616 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	f7ff fc76 	bl	8001e6e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fb29 	bl	8000bd8 <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fb25 	bl	8000bd8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b0a      	cmp	r3, #10
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e08d      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800259c:	f7ff fc75 	bl	8001e8a <LL_RCC_PLL_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x730>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025be:	0212      	lsls	r2, r2, #8
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025d2:	430a      	orrs	r2, r1
 80025d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	f7ff fc39 	bl	8001e52 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe faf2 	bl	8000bd8 <HAL_GetTick>
 80025f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe faee 	bl	8000bd8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b0a      	cmp	r3, #10
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e056      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800260a:	f7ff fc3e 	bl	8001e8a <LL_RCC_PLL_IsReady>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f1      	beq.n	80025f8 <HAL_RCC_OscConfig+0x668>
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	f7ff fc2a 	bl	8001e6e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002634:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe facb 	bl	8000bd8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fac7 	bl	8000bd8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b0a      	cmp	r3, #10
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e02f      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002658:	f7ff fc17 	bl	8001e8a <LL_RCC_PLL_IsReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f1      	bne.n	8002646 <HAL_RCC_OscConfig+0x6b6>
 8002662:	e028      	b.n	80026b6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e023      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0203 	and.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	429a      	cmp	r2, r3
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	429a      	cmp	r2, r3
 8002692:	d10e      	bne.n	80026b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	11c1808c 	.word	0x11c1808c

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e10f      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d91b      	bls.n	800271e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b86      	ldr	r3, [pc, #536]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4984      	ldr	r1, [pc, #528]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f6:	f7fe fa6f 	bl	8000bd8 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026fe:	f7fe fa6b 	bl	8000bd8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0f3      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b7b      	ldr	r3, [pc, #492]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d1ef      	bne.n	80026fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fb28 	bl	8001d84 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002734:	f7fe fa50 	bl	8000bd8 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800273c:	f7fe fa4c 	bl	8000bd8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0d4      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800274e:	f7ff fbda 	bl	8001f06 <LL_RCC_IsActiveFlag_HPRE>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f1      	beq.n	800273c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d016      	beq.n	8002792 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fb1e 	bl	8001daa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800276e:	f7fe fa33 	bl	8000bd8 <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002776:	f7fe fa2f 	bl	8000bd8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0b7      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002788:	f7ff fbce 	bl	8001f28 <LL_RCC_IsActiveFlag_SHDHPRE>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f1      	beq.n	8002776 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fb17 	bl	8001dd6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027a8:	f7fe fa16 	bl	8000bd8 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027b0:	f7fe fa12 	bl	8000bd8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e09a      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027c2:	f7ff fbc3 	bl	8001f4c <LL_RCC_IsActiveFlag_PPRE1>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f1      	beq.n	80027b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fb0c 	bl	8001dfc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027e4:	f7fe f9f8 	bl	8000bd8 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ec:	f7fe f9f4 	bl	8000bd8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e07c      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027fe:	f7ff fbb6 	bl	8001f6e <LL_RCC_IsActiveFlag_PPRE2>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f1      	beq.n	80027ec <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d043      	beq.n	800289c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d106      	bne.n	800282a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800281c:	f7ff f999 	bl	8001b52 <LL_RCC_HSE_IsReady>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d11e      	bne.n	8002864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e066      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d106      	bne.n	8002840 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002832:	f7ff fb2a 	bl	8001e8a <LL_RCC_PLL_IsReady>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e05b      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002848:	f7ff fa33 	bl	8001cb2 <LL_RCC_MSI_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e050      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002856:	f7ff f9a9 	bl	8001bac <LL_RCC_HSI_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e049      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fa6d 	bl	8001d48 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286e:	f7fe f9b3 	bl	8000bd8 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002874:	e00a      	b.n	800288c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002876:	f7fe f9af 	bl	8000bd8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e035      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288c:	f7ff fa6f 	bl	8001d6e <LL_RCC_GetSysClkSource>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1ec      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d21b      	bcs.n	80028e2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4913      	ldr	r1, [pc, #76]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe f98d 	bl	8000bd8 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028c2:	f7fe f989 	bl	8000bd8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e011      	b.n	80028f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x23c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028e2:	f000 f8b3 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_RCC_ClockConfig+0x240>)
 80028ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f925 	bl	8000b40 <HAL_InitTick>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58004000 	.word	0x58004000
 8002904:	20000008 	.word	0x20000008
 8002908:	2000000c 	.word	0x2000000c

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	f7ff fa28 	bl	8001d6e <LL_RCC_GetSysClkSource>
 800291e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002920:	f7ff fae6 	bl	8001ef0 <LL_RCC_PLL_GetMainSource>
 8002924:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x2c>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d139      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d136      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002938:	f7ff f9cb 	bl	8001cd2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x62>
 8002942:	f7ff f9c6 	bl	8001cd2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002946:	4603      	mov	r3, r0
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x4e>
 800294c:	f7ff f9d1 	bl	8001cf2 <LL_RCC_MSI_GetRange>
 8002950:	4603      	mov	r3, r0
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	e005      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x5a>
 800295a:	f7ff f9d5 	bl	8001d08 <LL_RCC_MSI_GetRangeAfterStandby>
 800295e:	4603      	mov	r3, r0
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x134>)
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	e014      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x8c>
 800296e:	f7ff f9b0 	bl	8001cd2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x7a>
 8002978:	f7ff f9bb 	bl	8001cf2 <LL_RCC_MSI_GetRange>
 800297c:	4603      	mov	r3, r0
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	e005      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
 8002986:	f7ff f9bf 	bl	8001d08 <LL_RCC_MSI_GetRangeAfterStandby>
 800298a:	4603      	mov	r3, r0
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x134>)
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d115      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029a4:	e012      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00c      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029b8:	f7ff f89e 	bl	8001af8 <LL_RCC_HSE_IsEnabledDiv2>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e001      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029cc:	f7ff f9cf 	bl	8001d6e <LL_RCC_GetSysClkSource>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d12f      	bne.n	8002a36 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029d6:	f7ff fa8b 	bl	8001ef0 <LL_RCC_PLL_GetMainSource>
 80029da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0xde>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d003      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80029e8:	e00d      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ec:	60fb      	str	r3, [r7, #12]
        break;
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029f0:	f7ff f882 	bl	8001af8 <LL_RCC_HSE_IsEnabledDiv2>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a02:	60fb      	str	r3, [r7, #12]
        break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	60fb      	str	r3, [r7, #12]
        break;
 8002a0a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a0c:	f7ff fa4e 	bl	8001eac <LL_RCC_PLL_GetN>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	fb03 f402 	mul.w	r4, r3, r2
 8002a18:	f7ff fa5f 	bl	8001eda <LL_RCC_PLL_GetDivider>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	3301      	adds	r3, #1
 8002a22:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a26:	f7ff fa4d 	bl	8001ec4 <LL_RCC_PLL_GetR>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0f5b      	lsrs	r3, r3, #29
 8002a2e:	3301      	adds	r3, #1
 8002a30:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a34:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a36:	697b      	ldr	r3, [r7, #20]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	08003e38 	.word	0x08003e38
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	01e84800 	.word	0x01e84800

08002a4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b598      	push	{r3, r4, r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a50:	f7ff ff5c 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002a54:	4604      	mov	r4, r0
 8002a56:	f7ff f9e4 	bl	8001e22 <LL_RCC_GetAHBPrescaler>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd98      	pop	{r3, r4, r7, pc}
 8002a70:	08003df8 	.word	0x08003df8

08002a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a8c:	f7ff f9d4 	bl	8001e38 <LL_RCC_GetAHB3Prescaler>
 8002a90:	4603      	mov	r3, r0
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9c      	lsrs	r4, r3, #18
 8002ab0:	f7fe ffe8 	bl	8001a84 <HAL_PWREx_GetVoltageRange>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f000 f80b 	bl	8002ad4 <RCC_SetFlashLatency>
 8002abe:	4603      	mov	r3, r0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	08003e38 	.word	0x08003e38
 8002acc:	08003df8 	.word	0x08003df8
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	; 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002ade:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <RCC_SetFlashLatency+0xfc>)
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae8:	6018      	str	r0, [r3, #0]
 8002aea:	3304      	adds	r3, #4
 8002aec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002aee:	4a39      	ldr	r2, [pc, #228]	; (8002bd4 <RCC_SetFlashLatency+0x100>)
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af8:	6018      	str	r0, [r3, #0]
 8002afa:	3304      	adds	r3, #4
 8002afc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002afe:	4a36      	ldr	r2, [pc, #216]	; (8002bd8 <RCC_SetFlashLatency+0x104>)
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b14:	d11d      	bne.n	8002b52 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	e016      	b.n	8002b4a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b24:	4413      	add	r3, r2
 8002b26:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d808      	bhi.n	8002b44 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b42:	e023      	b.n	8002b8c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	3301      	adds	r3, #1
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d9e5      	bls.n	8002b1c <RCC_SetFlashLatency+0x48>
 8002b50:	e01c      	b.n	8002b8c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b56:	e016      	b.n	8002b86 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b60:	4413      	add	r3, r2
 8002b62:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d808      	bhi.n	8002b80 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b76:	4413      	add	r3, r2
 8002b78:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b7e:	e005      	b.n	8002b8c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	3301      	adds	r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d9e5      	bls.n	8002b58 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <RCC_SetFlashLatency+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 0207 	bic.w	r2, r3, #7
 8002b94:	4911      	ldr	r1, [pc, #68]	; (8002bdc <RCC_SetFlashLatency+0x108>)
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b9c:	f7fe f81c 	bl	8000bd8 <HAL_GetTick>
 8002ba0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ba2:	e008      	b.n	8002bb6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ba4:	f7fe f818 	bl	8000bd8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e007      	b.n	8002bc6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <RCC_SetFlashLatency+0x108>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1ef      	bne.n	8002ba4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3738      	adds	r7, #56	; 0x38
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	08003080 	.word	0x08003080
 8002bd4:	08003088 	.word	0x08003088
 8002bd8:	08003090 	.word	0x08003090
 8002bdc:	58004000 	.word	0x58004000

08002be0 <LL_RCC_LSE_IsReady>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d101      	bne.n	8002bf8 <LL_RCC_LSE_IsReady+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_RCC_LSE_IsReady+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_SetUSARTClockSource>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	43db      	mvns	r3, r3
 8002c18:	401a      	ands	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_SetI2SClockSource>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_SetLPUARTClockSource>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_SetI2CClockSource>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_SetLPTIMClockSource>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_SetRNGClockSource>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_SetADCClockSource>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_SetRTCClockSource>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_GetRTCClockSource>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_ForceBackupDomainReset>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d058      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002de8:	f7fe fe3e 	bl	8001a68 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dec:	f7fd fef4 	bl	8000bd8 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002df2:	e009      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fd fef0 	bl	8000bd8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d902      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	74fb      	strb	r3, [r7, #19]
        break;
 8002e06:	e006      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e08:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d13c      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002e1c:	f7ff ffa7 	bl	8002d6e <LL_RCC_GetRTCClockSource>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d00f      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e36:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e38:	f7ff ffa5 	bl	8002d86 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	f7ff ffb3 	bl	8002da6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d014      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fd fec0 	bl	8000bd8 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd febc 	bl	8000bd8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d902      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	74fb      	strb	r3, [r7, #19]
            break;
 8002e72:	e004      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e74:	f7ff feb4 	bl	8002be0 <LL_RCC_LSE_IsReady>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d1ee      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5b 	bl	8002d44 <LL_RCC_SetRTCClockSource>
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
 8002e94:	e001      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fea9 	bl	8002c02 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe9e 	bl	8002c02 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fec0 	bl	8002c5c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fee6 	bl	8002cbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fedb 	bl	8002cbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fed0 	bl	8002cbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fea9 	bl	8002c86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe9e 	bl	8002c86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fe93 	bl	8002c86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d011      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe5e 	bl	8002c32 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fea5 	bl	8002cf0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d011      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fea3 	bl	8002d1a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fdc:	d107      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002fee:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58000400 	.word	0x58000400

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4d0d      	ldr	r5, [pc, #52]	; (8003034 <__libc_init_array+0x38>)
 8003000:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003002:	1b64      	subs	r4, r4, r5
 8003004:	10a4      	asrs	r4, r4, #2
 8003006:	2600      	movs	r6, #0
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	4d0b      	ldr	r5, [pc, #44]	; (800303c <__libc_init_array+0x40>)
 800300e:	4c0c      	ldr	r4, [pc, #48]	; (8003040 <__libc_init_array+0x44>)
 8003010:	f000 f820 	bl	8003054 <_init>
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	2600      	movs	r6, #0
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08003e78 	.word	0x08003e78
 8003038:	08003e78 	.word	0x08003e78
 800303c:	08003e78 	.word	0x08003e78
 8003040:	08003e7c 	.word	0x08003e7c

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
